{"version":3,"sources":["components/Firebase/context.js","components/Firebase/firebase.js","hooks/useSession.js","hooks/useUserClient.js","components/Navigation/index.js","constants/routes.js","components/Loading/index.js","components/HomePage/index.js","hooks/useNoteAndCards.js","components/ViewNote/Workspace/InfoWorkspace.js","components/ViewNote/Workspace/SaveButton.js","components/ViewNote/Workspace/FlipButton.js","components/ViewNote/Workspace/DefinitionInput.js","components/ViewNote/Workspace/DefinitionWorkspace.js","components/ViewNote/Workspace/index.js","components/ViewNote/Toolbar/index.js","components/ViewNote/ToolDrawer/index.js","components/ViewNote/QuillEditor/LastSaveTime/index.js","components/ViewNote/QuillEditor/index.js","components/ViewNote/index.js","components/SignInPage/index.js","components/SignOutPage/index.js","components/EnumState.js","components/SetsPage/AddSet/index.js","components/SetsPage/SetsView/index.js","components/NeedToLogin/index.js","components/SetsPage/index.js","components/SetPage/AddNote/index.js","components/SetPage/NotesView/index.js","components/DeckView/CardView/index.js","components/DeckView/index.js","components/SetPage/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["FirebaseContext","React","createContext","ROOT_COLLECTION","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","auth","doSignOut","signOut","currentUser","getNoteById","noteId","a","collection","doc","get","getSetForNoteId","where","addSet","userId","data","title","Error","trim","runTransaction","t","ref_userSetsDoc","setId","firestoreAutoId","set","sets_count","FieldValue","increment","sets","created_on","serverTimestamp","merge","ref_setNotesDoc","setTitle","notes_count","max_notes","notes","ref_setCardsDoc","cards_count","last_modified","Timestamp","fromDate","Date","cards","message","removeSet","delete","snap","exists","notesObj","noteIds","Object","keys","length","console","error","forEach","id","ref_note","debug","update","addNote","ref_newNote","content","removeNote","saveNote","noteData","writeableNoteData","ref_notesDoc","last_saved","now","addCard","cardData","side_one","side_two","cardId","removeCard","res","CHARS","autoId","i","charAt","Math","floor","random","USER_SESSION_STATUS","freeze","ANON","USER_LOADING","USER_READY","userSessionContext","initiliazing","userSession","userDbContext","loadingUser","userDb","userSessionStatusContext","UserSessionContext","userSessionValue","userDbValue","userSessionStatusValue","children","Provider","value","useUserSession","useContext","initializing","useUserDb","useUserSessionStatus","useOnAuthStateChanged","useState","sessionState","setSessionState","userState","setUserState","setInitializing","setLoadingUser","userObserverRef","useRef","onChange","useCallback","user","log","uid","current","callback","snapshot","empty","onSnapshot","err","e","useEffect","unsubscribe","onAuthStateChanged","userSessionStatus","ACTION_TYPE","UPDATE_ACTIVE_SET","CLEAR_ACTIVE_SET","initialState","cookies","Cookies","activeSet","userClientContext","useUserClient","Reducer","state","action","type","payload","UserClientContext","useReducer","dispatch","useStyles","makeStyles","root","flexGrow","appBarRoot","background","borderBottom","boxShadow","logo","minWidth","rightContent","display","marginLeft","doubleArrow","fontSize","color","usernameText","alignSelf","Navigation","classes","userClient","location","useLocation","history","useHistory","anchorEl","setAnchorEl","open","Boolean","handleCloseMenu","event","className","AppBar","position","elevation","Container","Toolbar","to","Button","Divider","orientation","variant","flexItem","IconButton","onClick","currentTarget","label","Typography","username","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","push","pathname","top","left","transform","relative","height","smallGrey","Loading","delay","rootClasses","clsx","progressClasses","size","Fade","in","unmountOnExit","style","transitionDelay","Box","CircularProgress","disableShrink","thickness","justifyContent","paddingTop","HomePage","NOTE_AND_CARDS_ACTION","CARD_ADDED","UPDATE_NOTE_ON_CLIENT","NOTE_SAVED","initialNullState","noteOnClient","noteIsSynced","lastSaved","noteSavedCallback","f","cardAddedCallback","NoteAndCardsContext","useNoteAndCards","NoteAndCardsContextProvider","InfoWorkspace","props","border","borderRadius","padding","disabled","SaveButton","startIcon","isEnabled","FlipButton","definitionInput","termInput","isActive","transition","outlinedInput","notchedOutlineActive","notchedOutlineInactive","formLabelRoot","fontWeight","focused","inputAdornmentRoot","DefinitionInput","onClearInput","onFocus","inputIsEmpty","isTerm","name","isactive","FormControl","fullWidth","TextField","multiline","rows","rowsMax","inputProps","textAlign","marginRight","InputLabelProps","shrink","InputProps","notchedOutline","endAdornment","InputAdornment","aria-label","onMouseDown","preventDefault","edge","overflow","DefinitionWorkspace","currentTextSelected","onWorkspaceSaveCard","termValue","setTermValue","definitionValue","setDefinitionValue","activeInput","setActiveInput","readyToSave","setReadyToSave","prevTextSelected","handleHotkeyFor","inputBox","shouldAddend","handleAddend","useHotkeys","anInputIsEmpty","onFocusInput","target","onChangeInput","input","Grid","container","spacing","justify","ClickAwayListener","onClickAway","item","xs","result","term","WORKSPACES","INFO_WORKSPACE","DEFINITION_WORKSPACE","FILLBLANK_WORKSPACE","Workspace","currentWorkspace","noteAndCardsState","dispatchNoteAndCards","isLoading","setIsLoading","specificWorkspaceCallback","then","catch","workspace","renderWorkspace","rootToolbar","marginBottom","minHeight","buttonTool","buttonInfo","buttonSelected","ViewNoteToolbar","setCurrentWorkspace","onToolClicked","disableGutters","drawer","flexShrink","drawerPaper","width","borderLeft","toolDrawerContainer","borderTop","ToolDrawer","Drawer","paper","anchor","LastSaveTime","date","time","dateTime","setDateTime","toLocaleString","split","d","t2","amPm","t3","substring","fontVariant","fontStyle","syncStatus","cloudIcon","saveIcon","cursor","editorPaper","borderTopLeftRadius","borderTopRightRadius","editorPaperReadOnly","QuillEditor","initialValue","readOnly","setValue","toDate","Tooltip","timestamp","theme","delta","source","editor","modules","toolbar","script","indent","align","clipboard","matchVisual","placeholder","noteViewContainer","noteViewContainerShifted","toggleBtnGridRoot","switchBase","backgroundColor","switchTrack","switchChecked","noteTitle","NoteView","useParams","noteInDb","setNoteInDb","setCurrentTextSelected","userClientDispatch","prevActiveSet","refresh","toolDrawerOpen","setToolDrawerOpen","setData","docs","onMouseUp","noteViewNode","document","getElementById","selection","window","getSelection","anchorNode","selectionNode","parentNode","contains","selectionString","toString","addEventListener","removeEventListener","alignItems","Switch","checked","track","noteView","ViewNotePage","SignInPage","INITIAL_STATE","email","password","userEntry","setUserEntry","setError","onSubmit","signInWithEmailAndPassword","doSignInWithEmailAndPassword","SignOutPage","EnumState","currentStatus","forStatus","visible","setVisible","AddSetForm","onPreAdd","onPostAdd","handleAddSet","setViewRoot","maxWidth","flexDirection","addSetFormDiv","noSetsDiv","setsListRoot","setsListItem","SetsList","onRemoveSet","List","map","setItem","ListItem","key","divider","component","Link","ListItemText","primary","secondary","seconds","toLocaleDateString","ListItemSecondaryAction","SetsView","userSetsDoc","setSets","setRefresh","setsArrayFromObject","shouldUpdate","setsObject","entries","AddSet","updatedUserSetsDoc","needToLoginRoot","needToLoginLinks","NeedToLogin","setsPageRoot","SetsPage","textfieldRoot","checkIconButton","checkIcon","AddNoteForm","onNewNoteAdded","handleAddNote","notesListRoot","notesViewToolbar","notesListItemNote","borderBottomLeftRadius","notesListLink","textDecoration","notesListItemPrimaryText","lineHeight","notesListItemAddNote","paddingRight","notesListItemSecondaryActionRemoveNote","right","NotesView","setInfo","setSetInfo","setNotes","addNotePopoverAnchor","setAddNotePopoverAnchor","getDocFromSetNotes","notesArrayFromObject","notesObject","updatedNotesView","onCloseAddNotePopover","onClickAddNotePopover","addNotePopoverOpen","Popover","AddNote","note","primaryTypographyProps","onRemoveNote","gridContainerRoot","gridItemSide","paperSide","gridItemActions","CardView","card","onDeleteCard","sm","Paper","deckViewToolbar","listItemCardView","whiteSpace","listItemCompactView","DeckView","deckInfo","setDeckInfo","setCards","compactView","setCompactView","getDocFromSetCards","cardsArrayFromObject","cardsObject","alt","gridItemNotesView","gridItemDeckView","sectionHeading","fontVariantCaps","SetPage","lg","paddingBottom","backdrop","App","notePath","setPath","Backdrop","exact","path","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+ZAIMA,EAAkBC,IAAMC,cAAc,MAO7BF,I,iDCGFG,G,cACJ,SADIA,EAEJ,QAFIA,EAGA,YAHAA,EAIA,YAJAA,EAKA,YAGbC,gBAlBuB,CACrBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,8CAaF,IAAMC,EAAKR,cACZS,EAAOT,SAYAU,EAAY,kBAAMD,EAAKE,WAEvBC,EAAc,kBAAMH,EAAKG,aAqBzBC,EAAW,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sEACZP,EAAGQ,WAAWjB,GAAuBkB,IAAIH,GAAQI,MADrC,mFAAH,sDAIXC,EAAe,uCAAG,WAAOL,GAAP,SAAAC,EAAA,sEAChBP,EACVQ,WAAWjB,GACXqB,MAFU,gBAEKN,EAFL,UAEqB,IAAK,IACpCI,MAJ0B,mFAAH,sDAwCfG,EAAM,uCAAG,WAAOC,EAAQC,GAAf,eAAAR,EAAA,yDACZS,EAAUD,EAAVC,MAEHF,EAHe,sBAIZ,IAAIG,MAAM,cAJE,UAMR,MAARF,GAAiC,KAAjBC,EAAME,OANN,sBAOZ,IAAID,MAAM,gDAPE,gCAYZjB,EAAGmB,eAAH,uCAAkB,WAAOC,GAAP,qBAAAb,EAAA,6DAEhBc,EAAkBrB,EACrBQ,WAAWjB,GACXkB,IAAIK,GAGDQ,EAAQC,IAPQ,SAUhBH,EAAEI,IACNH,EACA,CACEI,WAAYjC,YAAmBkC,WAAWC,UAAU,GACpDC,KAAK,eACFN,EAAQ,CACPN,MAAOA,EACPa,WAAYrC,YAAmBkC,WAAWI,qBAIhD,CAAEC,OAAO,IArBW,cAyBhBC,EAAkBhC,EACrBQ,WAAWjB,GACXkB,IAAIa,GA3Be,SA6BhBF,EAAEI,IAAIQ,EAAiB,CAC3BC,SAAUjB,EACVF,OAAQA,EACRoB,YAAa,EACbC,UAAW,EACXC,MAAO,KAlCa,cAuChBC,EAAkBrC,EACrBQ,WAAWjB,GACXkB,IAAIa,GAzCe,UA2ChBF,EAAEI,IAAIa,EAAiB,CAC3BJ,SAAUjB,EACVF,OAAQA,EACRwB,YAAa,EACbC,cAAe/C,YAAmBgD,UAAUC,SAAS,IAAIC,MACzDC,MAAO,KAhDa,4CAAlB,uDAZY,+DAgEZ,IAAI1B,MAAM,kCAAmC,KAAM2B,SAhEvC,kCAkEb,GAlEa,0DAAH,wDA4ENC,EAAS,uCAAG,WAAO/B,EAAQQ,GAAf,SAAAf,EAAA,yDAEX,MAAVO,GACS,MAATQ,GACkB,KAAlBR,EAAOI,QACU,KAAjBI,EAAMJ,OALe,sBAOf,IAAID,MAAM,iDAPK,gCAYfjB,EAAGmB,eAAH,uCAAkB,WAAOC,GAAP,yBAAAb,EAAA,6DAEhB8B,EAAkBrC,EACrBQ,WAAWjB,GACXkB,IAAIa,GAJe,SAKhBF,EAAE0B,OAAOT,GALO,uBAYHrC,EAChBQ,WAAWjB,GACXkB,IAAIa,GACJZ,MAfmB,WAYhBqC,EAZgB,QAgBZC,OAhBY,sBAiBd,IAAI/B,MAAM,8CAjBI,UAqBN,OADVgC,EAAWF,EAAKhC,OAAOqB,OAAS,MApBhB,uBAsBd,IAAInB,MAAM,sDAtBI,eA0BhBiC,EAAUC,OAAOC,KAAKH,IAEhBI,SAAWN,EAAKhC,OAAOmB,aACjCoB,QAAQC,MACN,qHAIAL,EAAQG,OAAS,IACnBH,EAAQM,QAAR,uCAAgB,WAAOC,GAAP,eAAAlD,EAAA,6DACRmD,EAAW1D,EAAGQ,WAAWjB,GAAuBkB,IAAIgD,GAD5C,SAERrC,EAAE0B,OAAOY,GAFD,2CAAhB,uDAIAJ,QAAQK,MAAR,8CACyCT,EAAQG,OADjD,qCAMIrB,EAAkBhC,EACrBQ,WAAWjB,GACXkB,IAAIa,GA/Ce,UAgDhBF,EAAE0B,OAAOd,GAhDO,eAmDhBX,EAAkBrB,EACrBQ,WAAWjB,GACXkB,IAAIK,GArDe,UAuDhBM,EAAEwC,OAAOvC,EAAT,aACJI,WAAYjC,YAAmBkC,WAAWC,WAAW,IADjD,eAEKL,GAAU9B,YAAmBkC,WAAWoB,WAzD7B,4CAAlB,uDAZe,6DAyEf,IAAI7B,MAAJ,4CAA+C,KAAM2B,UAzEtC,kCA2EhB,GA3EgB,yDAAH,wDAqFTiB,EAAO,uCAAG,WAAO/C,GAAP,+BAAAP,EAAA,yDAAee,EAAf,+BAAuB,KAAMP,EAA7B,uBACbC,EAAUD,EAAVC,MAEM,MAAVF,EAHiB,sBAIb,IAAIG,MAAM,cAJG,UAKD,MAATK,EALU,uBAMb,IAAIL,MAAM,aANG,WAOF,MAARF,GAAiC,KAAjBC,EAAME,OAPZ,uBAQb,IAAID,MAAM,wCARG,mCAabjB,EAAGmB,eAAH,uCAAkB,WAAOC,GAAP,iBAAAb,EAAA,6DAEhBuD,EAAc9D,EAAGQ,WAAWjB,GAAuBkB,MAFnC,SAIhBW,EAAEI,IAAIsC,EAAa,CACvBxC,MAAOA,EACPR,OAAQA,EACRE,MAAOA,EACP+C,QAAS,GACTlC,WAAYrC,YAAmBkC,WAAWI,kBAC1CS,cAAe/C,YAAmBkC,WAAWI,oBAVzB,cAchBE,EAAkBhC,EACrBQ,WAAWjB,GACXkB,IAAIa,GAhBe,SAkBhBF,EAAEI,IACNQ,EACA,CACEI,MAAM,eACH0B,EAAYL,GAAK,CAAEzC,MAAOA,IAE7BkB,YAAa1C,YAAmBkC,WAAWC,UAAU,IAEvD,CAAEI,OAAO,IA1BW,2CAAlB,uDAba,iEA2Cb,IAAId,MAAM,mCAAoC,KAAM2B,SA3CvC,kCA6Cd,GA7Cc,2DAAH,sDAsDPoB,EAAU,uCAAG,WAAO1D,EAAQgB,GAAf,SAAAf,EAAA,yDACV,MAAVD,EADoB,sBAEhB,IAAIW,MAAM,sCAFM,UAGJ,MAATK,EAHa,sBAIhB,IAAIL,MAAM,qCAJM,gCAShBjB,EAAGmB,eAAH,uCAAkB,WAAOC,GAAP,iBAAAb,EAAA,6DAEhBmD,EAAW1D,EAAGQ,WAAWjB,GAAuBkB,IAAIH,GAFpC,SAIhBc,EAAE0B,OAAOY,GAJO,cAQhB1B,EAAkBhC,EACrBQ,WAAWjB,GACXkB,IAAIa,GAVe,SAahBF,EAAEwC,OAAO5B,EAAT,aACJE,YAAa1C,YAAmBkC,WAAWC,WAAW,IADlD,gBAEMrB,GAAWd,YAAmBkC,WAAWoB,WAf/B,2CAAlB,uDATgB,+DA4BhB,IAAI7B,MAAM,sCAAuC,KAAM2B,SA5BvC,kCA8BjB,GA9BiB,0DAAH,wDAiCVqB,EAAQ,uCAAG,WAAO3D,EAAQgB,EAAO4C,GAAtB,qBAAA3D,EAAA,yDACR,MAAVD,EADkB,sBAEd,IAAIW,MAAM,sCAFI,UAGF,MAATK,EAHW,sBAId,IAAIL,MAAM,qCAJI,UAKC,MAAZiD,EALW,uBAMd,IAAIjD,MAAM,wCANI,eAUdD,EAAmBkD,EAAnBlD,MAAO+C,EAAYG,EAAZH,QAEXI,EAAoB,GACpBnD,GAAS+C,EACXI,EAAoB,CAAEnD,MAAOA,EAAO+C,QAASA,IACnC/C,GAAS+C,EACnBI,EAAoB,CAAEJ,QAASA,GACtB/C,IAAU+C,IACnBI,EAAoB,CAAEnD,MAAOA,IAlBT,oBAwBdhB,EAAGmB,eAAH,uCAAkB,WAAOC,GAAP,eAAAb,EAAA,6DAChB6D,EAAepE,EAAGQ,WAAWjB,GAAuBkB,IAAIH,GAI9D+D,EAAa7E,YAAmBgD,UAAU8B,MALpB,SAOhBlD,EAAEwC,OAAOQ,EAAT,2BACDD,GADC,IAEJ5B,cAAe8B,KATK,2CAAlB,uDAxBc,iEAqCd,IAAIpD,MAAM,oCAAqC,KAAM2B,SArCvC,iCAuCfyB,GAvCe,2DAAH,0DAiDRE,EAAO,uCAAG,WAAOzD,EAAQQ,EAAOkD,GAAtB,uBAAAjE,EAAA,yDACbkE,EAAuBD,EAAvBC,SAAUC,EAAaF,EAAbE,SAEJ,MAAV5D,EAHiB,sBAIb,IAAIG,MAAM,cAJG,UAKD,MAATK,EALU,sBAMb,IAAIL,MAAM,aANG,UAQP,MAAZuD,GACoB,KAApBC,EAASvD,QACW,KAApBwD,EAASxD,OAVU,uBAYb,IAAID,MAAM,wCAZG,eAgBf0D,EAASpD,IAGTc,EAAkBrC,EAAGQ,WAAWjB,GAA2BkB,IAAIa,GAnBhD,UAqBRe,EAAgBuB,QAAhB,mCACDe,GAAW,CACnBF,SAAUA,EACVC,SAAUA,EACV7C,WAAYrC,YAAmBkC,WAAWI,kBAC1CS,cAAe/C,YAAmBkC,WAAWI,oBALpC,4BAOEtC,YAAmBkC,WAAWC,UAAU,IAP1C,8BAQInC,YAAmBkC,WAAWI,mBARlC,IArBQ,qFAAH,0DAuCP8C,EAAU,uCAAG,WAAOD,EAAQrD,GAAf,mBAAAf,EAAA,yDACV,MAAVoE,EADoB,sBAEhB,IAAI1D,MAAM,sCAFM,UAGJ,MAATK,EAHa,sBAIhB,IAAIL,MAAM,qCAJM,cAOlBoB,EAAkBrC,EAAGQ,WAAWjB,GAA2BkB,IAAIa,GAP7C,SASNe,EAAgBuB,QAAhB,mCACNe,GAAWnF,YAAmBkC,WAAWoB,UADnC,4BAEHtD,YAAmBkC,WAAWC,WAAW,IAFtC,IATM,cASlBkD,EATkB,yBAcjBA,GAdiB,4CAAH,wDAmBVtD,EAAkB,WAM7B,IALA,IAAMuD,EACJ,iEAEEC,EAAS,GAEJC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,GAAUD,EAAMG,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,EAAMzB,SAE1D,OAAO0B,GCrcIM,EAAsBlC,OAAOmC,OAAO,CAC/CC,KAAM,OACNC,aAAc,eACdC,WAAY,eAmBRC,GAAqBpG,wBAAc,CACvCqG,aAAc,KACdC,YAAa,OAETC,GAAgBvG,wBAAc,CAClCwG,YAAa,KACbC,OAAQ,OAEJC,GAA2B1G,wBAAc+F,EAAoBE,MAEtDU,GAAqB,SAAC,GAK5B,IAJLC,EAII,EAJJA,iBACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,uBACAC,EACI,EADJA,SAEA,OACE,kBAACX,GAAmBY,SAApB,CAA6BC,MAAOL,GAClC,kBAACL,GAAcS,SAAf,CAAwBC,MAAOJ,GAC7B,kBAACH,GAAyBM,SAA1B,CAAmCC,MAAOH,GACvCC,MASEG,GAAiB,WAAO,IAAD,EACIC,qBAAWf,IACjD,MAAO,CAAEgB,aAFyB,EAC1BA,aACed,YAFW,EACZA,cAIXe,GAAY,WAAO,IAAD,EACGF,qBAAWZ,IAC3C,MAAO,CAAEC,YAFoB,EACrBA,YACcC,OAFO,EACRA,SAIVa,GAAuB,WAElC,OAD0BH,qBAAWT,KAO1Ba,GAAwB,WAAO,IAAD,EACDC,mBAAS1G,GADR,mBAClC2G,EADkC,KACpBC,EADoB,OAEPF,mBAAS,MAFF,mBAElCG,EAFkC,KAEvBC,EAFuB,OAIDJ,oBAAUC,GAJT,mBAIlCL,EAJkC,KAIpBS,EAJoB,OAKHL,mBAAS,MALN,mBAKlChB,EALkC,KAKrBsB,EALqB,KAOzC9D,QAAQK,MAAR,iDAC4C+C,EAD5C,2BAC2EZ,IAM3E,IAAMuB,EAAkBC,iBAAO,MAEzBC,EAAWC,uBAAY,SAACC,GAC5B,GAAIA,EAAM,CACRT,EAAgBS,GAChBN,GAAgB,GAChB7D,QAAQoE,IAAR,wDACmDD,EAAKE,IADxD,qCAGA,IACEP,GAAe,GACf9D,QAAQK,MACN,wEAEF0D,EAAgBO,SD7DWnE,EC6DkBgE,EAAKE,ID7DnBE,EC6DwB,SAACC,GACtD,GAAIA,EAASC,MACX,MAAM,IAAI9G,MACR,yFAGJiG,EAAaY,EAAS/G,QACtBqG,GAAe,GACf9D,QAAQK,MACN,6DAEFL,QAAQoE,IAAII,EAAS/G,SDvEtBf,EACJQ,WAAWjB,GACXkB,IAAIgD,GACJuE,WAAWH,GAAU,SAACI,GACrB,MAAM,IAAIhH,MAAM,qBAAsBgH,OCqEpC,MAAOC,GACP5E,QAAQC,MAAM2E,EAAEtF,SAGhB1C,UAGFiH,GAAgB,GAChBH,EAAgB,MAChB1D,QAAQoE,IACN,+EDpF0B,IAACjE,EAAIoE,ICuFlC,IAEHM,qBAAU,WAER,IDrG+BN,ECqGzBO,GDrGyBP,ECqGQN,EDpGlCtH,EAAKoI,mBAAmBR,IC0G7B,OAJAvE,QAAQK,MACN,gEAGK,WACLyE,OAED,CAACb,IAEJY,qBAAU,WAER,OAAO,WACL,OAAgC,OAA5Bd,EAAgBO,QACXP,EAAgBO,UAEhB,QAGV,IAkBH,MAAO,CACLlB,aAAcA,EACdd,YAAamB,EACbjB,YAAaA,EACbC,OAAQkB,EACRqB,kBApBK5B,EAWIrB,EAAoBE,KAVtBwB,EAIAE,EAGI5B,EAAoBI,WAFpBJ,EAAoBG,aAJpBH,EAAoBE,O,UCjKtBgD,GAAcpF,OAAOmC,OAAO,CACvCkD,kBAAmB,EACnBC,iBAAkB,IAQdC,GAAe,CACnBC,QANc,IAAIC,KAOlBC,UAAW,CACTvH,MAAO,KACPN,MAAO,OAIL8H,GAAoBxJ,wBAAcoJ,IAE3BK,GAAgB,WAC3B,OAAOtC,qBAAWqC,KAcdE,GAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MAGb,KAAKZ,GAAYC,kBACf,OAAO,2BACFS,GADL,IAEEJ,UAAW,CACTvH,MAAO4H,EAAOE,QAAQ9H,MACtBN,MAAOkI,EAAOE,QAAQpI,SAG5B,KAAKuH,GAAYE,iBACf,OAAO,2BACFQ,GADL,IAEEJ,UAAW,CACTvH,MAAO,KACPN,MAAO,QAGb,QACE,OAAOiI,IAIEI,GApCW,SAAC,GAAkB,IAAhBhD,EAAe,EAAfA,SAAe,EAChBiD,qBAAWN,GAASN,IADJ,mBACnCO,EADmC,KAC5BM,EAD4B,KAG1C,OACE,kBAACT,GAAkBxC,SAAnB,CAA4BC,MAAO,CAAC0C,EAAOM,IACxClD,ICZDmD,GAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,WAAY,cACZC,aAAc,kBACdC,UAAW,QAEbC,KAAM,CACJC,SAAU,KAEZC,aAAc,CACZC,QAAS,OACTC,WAAY,QAEdC,YAAa,CACXC,SAAU,QACVC,MAAO,WAETC,aAAc,CACZD,MAAO,QACPE,UAAW,YA0GAC,GAtGI,WACjB,IAAMC,EAAUnB,KAGR5D,EAAgBY,KAAhBZ,YAEQ6B,EAASd,KAAjBZ,OANe,EAUkBgD,KAVlB,mBAUhB6B,EAVgB,KAYjBC,GAZiB,KAYNC,eACXC,EAAUC,cAbO,EAeSlE,mBAAS,MAflB,mBAehBmE,EAfgB,KAeNC,EAfM,KAgBjBC,EAAOC,QAAQH,GAMfI,EAAkB,SAACC,GACvBJ,EAAY,OASd,OACE,yBAAKK,UAAWZ,EAAQjB,MACtB,kBAAC8B,EAAA,EAAD,CAAQD,UAAWZ,EAAQf,WAAY6B,SAAS,SAASC,UAAW,GAClE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,GCtFE,KDuFN,kBAACC,EAAA,EAAD,CAAQP,UAAWZ,EAAQX,MACzB,kBAAC,IAAD,CAAeM,SAAS,YAG5B,kBAACyB,EAAA,EAAD,CAASC,YAAY,WAAWC,QAAQ,SAASC,UAAQ,IACzD,kBAAC,IAAD,CAAML,GC1FO,SD2FX,kBAACC,EAAA,EAAD,cAGAlG,GAC4B,MAA9BgF,EAAW/B,UAAUvH,OACS,MAA9BsJ,EAAW/B,UAAU7H,MACnB,oCACE,kBAAC,IAAD,CAAiBuK,UAAWZ,EAAQN,cACpC,kBAAC,IAAD,CAAMwB,GAAE,UClGA,ODkGA,YAAwBjB,EAAW/B,UAAUvH,QACnD,kBAACwK,EAAA,EAAD,KAASlB,EAAW/B,UAAU7H,SAJC,KASrC,kBAAC+K,EAAA,EAAD,CAASC,YAAY,WAAWC,QAAQ,SAASC,UAAQ,IACxDtG,EACC,yBAAK2F,UAAWZ,EAAQT,cACtB,kBAACiC,EAAA,EAAD,CAAYC,QA3CP,SAACd,GAClBJ,EAAYI,EAAMe,gBA0C2BC,MAAM,QACrC,kBAAC,IAAD,OAED7E,GACC,kBAAC8E,EAAA,EAAD,CAAYN,QAAQ,QAAQV,UAAWZ,EAAQH,cAC5C/C,EAAK+E,UAIV,kBAACC,EAAA,EAAD,CACExB,SAAUA,EACVyB,aAAc,CAAEC,SAAU,MAAOC,WAAY,SAC7CC,aAAW,EACXC,gBAAiB,CACfH,SAAU,MACVC,WAAY,SAEdzB,KAAMA,EACN4B,QAAS1B,GAET,kBAAC2B,EAAA,EAAD,CAAUZ,QAASf,GAAnB,WACA,kBAACU,EAAA,EAAD,CAASC,YAAY,eACrB,kBAACgB,EAAA,EAAD,CAAUZ,QAzDH,SAACd,GACtBpL,IACAmL,IACAN,EAAQkC,KCzEgB,cD+HV,cChIS,YDoIbpC,EAASqC,UACP,yBAAK3B,UAAWZ,EAAQT,cACtB,kBAAC,IAAD,CAAM2B,GCtIG,WDuIP,kBAACC,EAAA,EAAD,sB,gDElIdtC,GAAYC,YAAW,CAC3BC,KAAM,CACJ+B,SAAU,QACV0B,IAAK,MACLC,KAAM,MACNC,UAAW,yBAEbC,SAAU,CACR7B,SAAU,WACV4B,UAAW,sBACXE,OAAQ,OAEVC,UAAW,CACTjD,MAAO,UAyCIkD,GArCC,SAAC,GAA8C,IAA5CtE,EAA2C,EAA3CA,KAA2C,IAArCmE,gBAAqC,aAAnBI,aAAmB,SACtD/C,EAAUnB,KAEVmE,EAAcC,aAAK,eAEpBjD,EAAQ2C,SAAWA,GAFA,eAInB3C,EAAQjB,MAAQ4D,IAGfO,EAAkBD,aAAK,eAC1BjD,EAAQ6C,UAAqB,cAATrE,IAGjB2E,EAAgB,cAAT3E,EAAuB,GAAK,GAEzC,OACE,kBAAC4E,GAAA,EAAD,CACEC,IAAE,EACFC,eAAa,EACbC,MAAO,CACLC,gBAAiBT,EAAQ,QAAU,QAGrC,kBAACU,GAAA,EAAD,CAAK7C,UAAWoC,GACd,kBAACU,GAAA,EAAD,CACE9D,MAAM,UACNuD,KAAMA,EACNvC,UAAWsC,EACXS,eAAa,EACbC,UAAW,OChDf/E,GAAYC,YAAW,CAC3BC,KAAM,CACJS,QAAS,OACTqE,eAAgB,SAChBC,WAAY,UAiBDC,GAbE,WACf,IAAM/D,EAAUnB,KAGF,UFnBS,QEmBT,yBAEd,OACE,kBAACmC,EAAA,EAAD,CAAWJ,UAAWZ,EAAQjB,MAC5B,kBAAC6C,EAAA,EAAD,CAAYN,QAAQ,MAApB,aCLO0C,I,OAAwBxL,OAAOmC,OAAO,CACjDsJ,WAAY,YACZC,sBAAuB,qBACvBC,WAAY,eAORC,GAAmB,CACvBzN,MAAO,KACPR,OAAQ,KACRR,OAAQ,KACR0O,aAAc,GACdC,cAAc,EACdC,UAAW,KACXC,kBAAmB,SAACC,GAAD,OAAOA,GAC1BC,kBAAmB,SAACD,GAAD,OAAOA,IAItBE,GAAsBhQ,wBAAcyP,IAG7BQ,GAAkB,WAC7B,OAAO9I,qBAAW6I,KAIPE,GAA8B,SAAC,GAGrC,IAFLnJ,EAEI,EAFJA,SAEI,IADJqC,oBACI,qBADgBqG,IAChB,IACsBzF,qBAAWN,GAASN,GAD1C,mBACGO,EADH,KACUM,EADV,KAGJ,OACE,kBAAC+F,GAAoBhJ,SAArB,CAA8BC,MAAO,CAAC0C,EAAOM,IAC1ClD,IAMD2C,GAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACb,KAAKwF,GAAsBC,WAEzB,OADA3F,EAAMoG,oBACCpG,EACT,KAAK0F,GAAsBE,sBACzB,OAAO,2BACF5F,GADL,IAEE+F,aAAc9F,EAAOE,QACrB6F,cAAc,IAGlB,KAAKN,GAAsBG,WAEzB,OADA7F,EAAMkG,oBACC,2BACFlG,GADL,IAEEgG,cAAc,EACdC,UAAWhG,EAAOE,UAGtB,QACE,OAAOH,I,qBCvEEwG,GAVO,SAACC,GACrB,OACE,kBAAC/D,EAAA,EAAD,KACE,kBAACY,EAAA,EAAD,CAAYN,QAAQ,SAApB,wD,8BCDAzC,GAAYC,YAAW,CAC3BC,KAAM,CACJiG,OAAQ,EACRC,aAAc,EACd7F,UAAW,mCACXQ,MAAO,QACPV,WAAY,UACZ0D,OAAQ,GACRsC,QAAS,SACT,UAAW,CACThG,WAAY,YAGhBiG,SAAU,CACRjG,WAAY,UACZU,MAAO,wBAII,SAASwF,GAAWL,GACjC,IAAM/E,EAAUnB,KAChB,OACE,kBAACsC,EAAA,EAAD,CACEP,UAAWZ,EAAQjB,KACnBsG,UAAW,kBAAC,KAAD,MACXF,UAAWJ,EAAMO,UACjB7D,QAASsD,EAAMtD,QACfzB,QAAS,CACPmF,SAAUnF,EAAQmF,WANtB,Q,yBCtBEtG,GAAYC,YAAW,CAC3BC,KAAM,CAGJiG,OAAQ,EACRC,aAAc,EACd7F,UAAW,mCACXQ,MAAO,UACPV,WAAY,QACZ0D,OAAQ,GACRsC,QAAS,UAEXC,SAAU,CACRjG,WAAY,UACZU,MAAO,wBAII,SAAS2F,GAAWR,GACjC,IAAM/E,EAAUnB,KAChB,OACE,kBAACsC,EAAA,EAAD,CACEP,UAAWZ,EAAQjB,KACnBsG,UAAW,kBAAC,KAAD,MACXF,UAAWJ,EAAMO,UACjB7D,QAASsD,EAAMtD,QACfzB,QAAS,CACPmF,SAAUnF,EAAQmF,WANtB,Q,qFCjBEtG,GAAYC,YAAW,CAC3B0G,gBAAiB,GACjBC,UAAW,GACXC,SAAU,CACRxG,WAAY,2BACZyG,WAAY,2DAEdC,cAAe,CACbV,QAAS,oBACTD,aAAc,MAEd,kCAAmC,CACjCD,OAAQ,kCACR7F,aAAc,uCAGlB0G,qBAAsB,CACpB1G,aAAc,qCACdC,UAAW,oCAEb0G,uBAAwB,CACtBd,OAAQ,kCACR5F,UAAW,oCAEb2G,cAAe,CACb,YAAa,CACXnG,MAAO,UACPoG,WAAY,SAGhBC,QAAS,GACTC,mBAAoB,CAClBxD,UAAW,6BAIA,SAASyD,GAAT,GAMX,IAAD,MALDC,oBAKC,MALc,SAAC3B,GAAD,OAAOA,GAKrB,MAJD4B,eAIC,MAJS,SAAC5B,GAAD,OAAOA,GAIhB,MAHD7H,gBAGC,MAHU,SAAC6H,GAAD,OAAOA,GAGjB,MAFD6B,oBAEC,SADEvB,EACF,qEACK/E,EAAUnB,KACV0H,EAAwB,SAAfxB,EAAMyB,KACbC,EAAiC1B,EAAjC0B,SAAU7K,EAAuBmJ,EAAvBnJ,MAAO4K,EAAgBzB,EAAhByB,KAAM7E,EAAUoD,EAAVpD,MACzBf,EAAYqC,cAAI,mBACjBjD,EAAQwF,iBAAmBe,GADV,cACmBvG,EAAQyF,UAAYc,GADvC,kBAGjBvG,EAAQ0F,SAAWe,IAIxB,OACE,kBAACC,GAAA,EAAD,CAAaC,WAAW,GACtB,kBAACC,GAAA,EAAD,CACEJ,KAAMA,EACN7E,MAAOA,EACPf,UAAWA,EACXiG,WAAS,EACTC,KAAM,EACNC,QAAS,EACTzF,QAAQ,WACR0F,WAAY,CACVzD,MAAO,CACL0D,UAAW,SACX/B,QAAS,sBACTgC,YAAa,UAGjBC,gBAAiB,CACfC,QAAQ,EACRpH,QAAS,CACPjB,KAAMiB,EAAQ+F,cACdE,QAASjG,EAAQiG,UAGrBU,WAAW,EACXU,WAAY,CACVrH,QAAS,CACPjB,KAAMiB,EAAQ4F,cACd0B,eAAgBb,EACZzG,EAAQ6F,qBACR7F,EAAQ8F,uBACZG,QAASjG,EAAQiG,SAEnBsB,aACE,kBAACC,GAAA,EAAD,CACE1G,SAAS,MACTF,UAAWZ,EAAQkG,oBAEnB,kBAAC1E,EAAA,EAAD,CACEiG,aAAW,iBACXhG,QAAS2E,EACTsB,YAAa,SAACnK,GAAD,OAAOA,EAAEoK,kBACtBC,KAAK,OAEHtB,EAA2B,KAAZ,kBAAC,KAAD,SAKzBD,QAASA,EACTzJ,SAAUA,EACVhB,MAAOA,EACPiM,SAAS,YCvGjB,IAgLeC,GAhLa,SAAC,GAGtB,IAFLC,EAEI,EAFJA,oBAEI,IADJC,2BACI,MADkB,SAACvD,GAAD,OAAOA,GACzB,IAC8BtI,mBAAS,IADvC,mBACG8L,EADH,KACcC,EADd,OAE0C/L,mBAAS,IAFnD,mBAEGgM,EAFH,KAEoBC,EAFpB,OAGkCjM,mBAAS,MAH3C,mBAGGkM,EAHH,KAGgBC,EAHhB,OAIkCnM,oBAAS,GAJ3C,mBAIGoM,EAJH,KAIgBC,EAJhB,KAKEC,EAAmB9L,iBAAOoL,GAEhCvK,qBAAU,WAER,GAAoB,OAAhB6K,GAMsB,OAAxBN,GAC+B,KAA/BA,EAAoBxR,QACpBwR,IAAwBU,EAExB,OAAQJ,GACN,IAAK,OACHH,EAAaH,GACb,MACF,IAAK,aACHK,EAAmBL,MAIxB,CAACA,IAEJ,IAAMW,EAAkB,SAACC,EAAUC,GACjC,GAAoB,OAAhBP,GAA+C,MAAvBN,EAA5B,CAIA,IAAMc,EAAe,SAACjN,GACpB,MAAqB,KAAjBA,EAAMrF,OACDwR,EAEAnM,EAAQ,KAAOmM,GAIT,SAAbY,EAEAT,EADEU,EACW,SAAChN,GAAD,OAAWiN,EAAajN,IAExBmM,GAEO,eAAbY,GAEPP,EADEQ,EACiB,SAAChN,GAAD,OAAWiN,EAAajN,IAExBmM,KAMzBe,aAAW,KAAK,kBAAMJ,EAAgB,QAAQ,KAAO,CAACX,IAEtDe,aAAW,KAAK,kBAAMJ,EAAgB,cAAc,KAAO,CACzDX,IAKFvK,qBAAU,WACR,GAAiB,MAAbyK,GAAwC,MAAnBE,EAAzB,CAGA,IAAMY,EACiB,KAArBd,EAAU1R,QAA4C,KAA3B4R,EAAgB5R,OAE7CiS,GAAgBO,MACf,CAACd,EAAWE,IAEf,IAMMa,EAAe,SAACzL,GACpB+K,EAAe/K,EAAE0L,OAAOzC,OAGpB0C,EAAgB,SAAC3L,GACrB,IAAM4L,EAAQ5L,EAAE0L,OAAOzC,KACT,SAAV2C,EACFjB,EAAa3K,EAAE0L,OAAOrN,OACH,eAAVuN,GACTf,EAAmB7K,EAAE0L,OAAOrN,QAoChC,OACE,kBAACwN,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,gBAClC,kBAACC,GAAA,EAAD,CAAmBC,YArDE,WACK,OAAxB1B,GAAwD,KAAxBA,GAClCO,EAAe,QAoDb,kBAACc,GAAA,EAAD,CAAMC,WAAS,EAACK,MAAI,EAACJ,QAAS,GAC5B,kBAACF,GAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,IACb,kBAACxD,GAAD,CACEM,SAA0B,SAAhB4B,EACV7B,KAAK,OACL7E,MAAM,OACN0E,QAAS,SAAC9I,GAAD,OAAOyL,EAAazL,IAC7BX,SAAU,SAACW,GAAD,OAAO2L,EAAc3L,IAC/B3B,MAAOqM,EACP7B,aA5Ca,WACvB8B,EAAa,KA4CH5B,aAA4B,KAAd2B,KAGlB,kBAACmB,GAAA,EAAD,CAAMM,MAAI,EAACC,IAAE,GACX,kBAACxD,GAAD,CACEM,SAA0B,eAAhB4B,EACV7B,KAAK,aACL7E,MAAM,aACN0E,QAAS,SAAC9I,GAAD,OAAOyL,EAAazL,IAC7BX,SAAU,SAACW,GAAD,OAAO2L,EAAc3L,IAC/B3B,MAAOuM,EACP/B,aApDmB,WAC7BgC,EAAmB,KAoDT9B,aAAkC,KAApB6B,OAKtB,kBAACiB,GAAA,EAAD,CAAMM,MAAI,EAACL,WAAS,EAACM,GAAI,GAAIJ,QAAQ,SAASD,QAAS,GACrD,kBAACF,GAAA,EAAD,CAAMM,MAAI,GACR,kBAACtE,GAAD,CAAYE,UAAWiD,EAAa9G,QAxD7B,WAMbuG,EACE,CAAElO,SAAUmO,EAAWlO,SAAUoO,IACjC,SAACyB,GACKA,IACF1B,EAAa,IACbE,EAAmB,YA+CrB,kBAACgB,GAAA,EAAD,CAAMM,MAAI,GACR,kBAACnE,GAAD,CACED,UAAgC,KAArB2C,EAAU1R,QAA4C,KAA3B4R,EAAgB5R,OACtDkL,QA5CK,WACb,IAAMoI,EAAO5B,EAEbC,EADYC,GAEZC,EAAmByB,UC9HVC,GAAatR,OAAOmC,OAAO,CACtCoP,eAAgB,gBAChBC,qBAAsB,sBACtBC,oBAAqB,uBAsERC,GA/DG,SAAC,GAGZ,IAFLnC,EAEI,EAFJA,oBAEI,IADJoC,wBACI,MADeL,GAAWC,eAC1B,IAC8CnF,KAD9C,mBACGwF,EADH,KACsBC,EADtB,OAE8BlO,oBAAS,GAFvC,mBAEGmO,EAFH,KAEcC,EAFd,KASEvC,EAAsB,SAACnO,EAAU2Q,GACrCD,GAAa,GAIb3Q,EAAQwQ,EAAkBjU,OAAQiU,EAAkBzT,MAAOkD,GACxD4Q,MAAK,SAACvQ,GAELmQ,EAAqB,CACnB7L,KAAMwF,GAAsBC,aAGW,oBAA9BuG,GAETA,EAA0BtQ,GAE5BqQ,GAAa,MAEdG,OAAM,SAAC9R,GACND,QAAQC,MAAR,gDAAuDA,EAAMX,UAC7DsS,GAAa,OAoBnB,OACE,kBAAC9G,GAAA,EAAD,CAAK3K,GAAG,aACLwR,EACC,kBAAC,GAAD,CAAS9L,KAAK,YAAYmE,UAAU,EAAMI,OAAO,IAnB/B,SAAC4H,GACvB,OAAQA,GACN,KAAKb,GAAWE,qBACd,OACE,kBAAC,GAAD,CACEjC,oBAAqBA,EACrBC,oBAAqBA,IAG3B,KAAK8B,GAAWC,eACd,OAAO,kBAAC,GAAD,MACT,QACE,OAAO,MASPa,CAAgBT,KCjElBtL,GAAYC,YAAW,CAC3B+L,YAAa,CACXhH,eAAgB,aAChBiH,aAAc,OACd3L,aAAc,kBACd4L,UAAW,OACX7F,QAAS,WAEX8F,WAAY,CACV9L,WAAY,UACZgI,YAAa,MACbhC,QAAS,UACTD,aAAc,OAEhBgG,WAAY,CACV/F,QAAS,WAEXgG,eAAgB,CACdhM,WAAY,UACZU,MAAO,QACP,UAAW,CACTV,WAAY,cAmEHiM,GAzDS,SAAC,GAA6B,IAA3BpD,EAA0B,EAA1BA,oBAA0B,EACH5L,mBAC9C2N,GAAWE,sBAFsC,mBAC5CG,EAD4C,KAC1BiB,EAD0B,OAIDxG,KAJC,mBAM7CyG,GAN6C,UAM7B,SAAC9N,GACjB4M,IAAqB5M,EAAEmE,cAAc8E,KACvC4E,EAAoB,MAEpBA,EAAoB7N,EAAEmE,cAAc8E,MAEtCjJ,EAAEoK,mBAGE3H,EAAUnB,KAEhB,OACE,oCACE,kBAACoC,EAAA,EAAD,CAASL,UAAWZ,EAAQ6K,YAAaS,gBAAgB,GACvD,kBAACnK,EAAA,EAAD,CACEqF,KAAMsD,GAAWE,qBACjBvI,QAAS4J,EACTzK,UAAWqC,aAAKjD,EAAQgL,WAAT,eACZhL,EAAQkL,eACPf,IAAqBL,GAAWE,wBALtC,cAUA,kBAAC7I,EAAA,EAAD,CACEP,UAAWqC,aAAKjD,EAAQgL,WAAT,eACZhL,EAAQkL,eACPf,IAAqBL,GAAWG,uBAHtC,cAQA,kBAAC9I,EAAA,EAAD,CACEqF,KAAMsD,GAAWC,eACjBtI,QAAS4J,EACTzK,UAAWqC,aAAKjD,EAAQiL,WAAT,eACZjL,EAAQkL,eACPf,IAAqBL,GAAWC,kBAGpC,kBAAC,KAAD,QAGJ,kBAAC,GAAD,CACEhC,oBAAqBA,EACrBoC,iBAAkBA,M,UC1FpBtL,GAAYC,YAAW,CAC3ByM,OAAQ,CACNC,WAAY,GAEdC,YAAa,CACXjJ,IAAK,OACLkJ,MARgB,IAShBxG,QAAS,eACTyG,WAAY,QAEdC,oBAAqB,CACnBC,UAAW,uBAsBAC,GAlBI,SAAC,GAAwB,IAAtBtL,EAAqB,EAArBA,KAAM9E,EAAe,EAAfA,SACpBsE,EAAUnB,KAEhB,OACE,kBAACkN,GAAA,EAAD,CACEnL,UAAWZ,EAAQuL,OACnBvL,QAAS,CACPgM,MAAOhM,EAAQyL,aAEjBnK,QAAQ,aACR2K,OAAO,QACPzL,KAAMA,GAEN,yBAAKI,UAAWZ,EAAQ4L,qBAAsBlQ,K,8ECZrCwQ,GArBM,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACDhQ,mBAAS,CACvCgQ,KAAM,GACNC,KAAM,KAHyB,mBAC1BC,EAD0B,KAChBC,EADgB,KAcjC,OARA9O,qBAAU,WAAO,IAAD,EACC2O,EAAKI,iBAAiBC,MAAM,KAD7B,mBACPC,EADO,YAEOlW,OAAOiW,MAAM,KAFpB,mBAEPE,EAFO,KAEHC,EAFG,KAGRC,EAAKF,EAAGG,UAAU,EAAGH,EAAGhU,OAAS,GAEvC4T,EAAY,CAAEH,KAAMM,EAAGL,KAAK,GAAD,OAAKQ,EAAL,YAAWD,OACrC,CAACR,IAGF,0BAAM5I,MAAO,CAAEuJ,YAAa,oBAAqBC,UAAW,WAA5D,eACeV,EAASF,KADxB,OACkCE,EAASD,OCKzCvN,GAAYC,YAAW,CAC3BkO,WAAY,CACVxN,QAAS,OACT0F,QAAS,SAEX+H,UAAW,CACTrN,MAAO,UACPH,WAAY,OAEdyN,SAAU,CACRtN,MAAO,UACPH,WAAY,MACZ,UAAW,CACTG,MAAO,OACPuN,OAAQ,YAGZC,YAAa,CACXC,oBAAqB,IACrBC,qBAAsB,KAExBC,oBAAqB,CACnBtI,aAAc,SA6FHuI,GAzFK,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,aAAqC,IAAvBC,gBAAuB,SACpD1N,EAAUnB,KAD0C,EAEhC1C,mBAASsR,GAAgB,IAFO,mBAEnD7R,EAFmD,KAE5C+R,EAF4C,OAGR/I,KAHQ,mBAGnDwF,EAHmD,KAGhCC,EAHgC,KA+C1D,OACE,qCACIqD,GACA,yBAAK9M,UAAWZ,EAAQgN,YACtB,kBAAC,GAAD,CAAcb,KAAM/B,EAAkB7F,UAAUqJ,WAC/CxD,EAAkB9F,aACjB,kBAACuJ,GAAA,EAAD,CAASxX,MAAM,kBACb,kBAAC,KAAD,CAAeuK,UAAWZ,EAAQiN,aAGpC,kBAACY,GAAA,EAAD,CAASxX,MAAM,aACb,kBAAC,KAAD,CAAUuK,UAAWZ,EAAQkN,SAAUzL,QA5BpC,WACbnI,EAAS8Q,EAAkBzU,OAAQyU,EAAkBzT,MAAO,CAC1DyC,QAASwC,IAER6O,MAAK,SAACqD,GAELnV,QAAQK,MAAM,4CACdqR,EAAqB,CACnB7L,KAAMwF,GAAsBG,WAC5B1F,QAASqP,OAGZpD,OAAM,SAAC9R,GACND,QAAQC,MAAR,+CAAsDA,EAAMX,kBAoB9D,kBAAC,KAAD,CACE8V,MAAM,OACNnS,MAAOA,EACPgB,SAlDW,SAACxD,EAAS4U,EAAOC,EAAQC,GACxCP,EAASvU,GAETT,QAAQoE,IAAIiR,GACZrV,QAAQoE,IAAIkR,GAEG,SAAXA,GACF5D,EAAqB,CACnB7L,KAAMwF,GAAsBE,sBAC5BzF,QAASrF,KA0CTsU,SAAUA,EACVS,QAAS,CACPC,QAASV,EAAW,KAhEL,CACrB,CAAC,CAAEvK,KAAM,CAAC,SAAS,EAAO,QAAS,UACnC,CAAC,OAAQ,SAAU,YAAa,UAChC,CAAC,cACD,CAAC,CAAEkL,OAAQ,OAAS,CAAEA,OAAQ,UAC9B,CAAC,CAAEC,OAAQ,MAAQ,CAAEA,OAAQ,OAC7B,CAAC,CAAE1O,MAAO,IAAM,CAAEV,WAAY,KAC9B,CAAC,CAAEqP,MAAO,KACV,CAAC,UAyDKC,UAAW,CACTC,aAAa,IAGjBC,YAAuB,KAAV9S,EAAe,wBAA0B,OCpGxDiD,GAAYC,YAAW,CAC3BC,KAAM,CACJS,QAAS,QAEXmP,kBAAmB,CACjB3P,SAAU,GAEZ4P,yBAA0B,CACxB1H,YAAa,SAEf2H,kBAAmB,CACjBhL,eAAgB,SAChB6H,MAAO,OAEToD,WAAY,CACV,kBAAmB,CACjBlP,MAAO,WAET,iCAAkC,CAChCmP,gBAAiB,YAGrBC,YAAa,GACbC,cAAe,GACfC,UAAW,KAOPC,GAAW,WACf,IAAMnP,EAAUnB,KACJlJ,EAAWyZ,cAAftW,GAFa,EAGWqD,qBAHX,mBAGdkT,EAHc,KAGJC,EAHI,OAIiCnT,mBAAS,MAJ1C,mBAId4L,EAJc,KAIOwH,EAJP,OAKapT,oBAASkT,GALtB,mBAKd/E,EALc,KAKHC,EALG,KAMfnK,EAAUC,cANK,EAOoBjC,KAPpB,mBAOd6B,EAPc,KAOFuP,EAPE,KAQfC,EAAgB9S,iBAAOsD,EAAW/B,WARnB,EASS/B,oBAAS,GATlB,mBASduT,EATc,aAUuBvT,oBAAS,IAVhC,mBAUdwT,EAVc,KAUEC,EAVF,KAerBpS,qBAAU,WACR,GAAc,MAAV7H,GAAoC,KAAlBA,EAAOY,OAI3B,OAHAoC,QAAQoE,IAAI,aAEZqD,EAAQkC,KdzEM,Kc6EhBiI,GAAa,GAEb7U,EAAYC,GACT8U,MAAK,SAACtN,GACL,IAAKA,EAAS9E,OACZ,MAAM,IAAI/B,MAAJ,kDAAqDX,IAG7D2Z,EAAY,2BAAKnS,EAAS/G,QAAf,IAAuBT,OAAQwH,EAASrE,MAK/C2W,EAAcxS,QAAQtG,QAAUwG,EAAS/G,OAAOO,QAClDgC,QAAQK,MAAM,sDAEdhD,EAAgBmH,EAASrE,IACtB2R,MAAK,SAACtN,GACL,GAAIA,EAASC,MACX,MAAM,IAAI9G,MAAJ,2DAGD,GAAI6G,EAASgG,KAAO,EACzB,MAAM,IAAI7M,MAAJ,uEAKR,IAAMuZ,EAAU1S,EAAS2S,KAAK,GAI9BN,EAAmB,CACjBhR,KAAMZ,GAAYC,kBAClBY,QAAS,CAAE9H,MAAOkZ,EAAQ/W,GAAIzC,MAAOwZ,EAAQzZ,OAAOkB,YAEtDmY,EAAcxS,QAAU,CACtBtG,MAAOkZ,EAAQ/W,GACfzC,MAAOwZ,EAAQzZ,OAAOkB,aAGzBoT,OAAM,SAAC9R,GACND,QAAQC,MAAR,yEACoEA,EAAMX,cAKhFsS,GAAa,MAEdG,OAAM,SAAC9R,GACND,QAAQC,MACN,qDACAA,EAAMX,SAERsS,GAAa,MAGjB5R,QAAQoE,IAAI,yCACX,CAACpH,EAAQ+Z,EAAStP,EAASqP,EAAeD,IAI7C,IAAMO,EAAYlT,uBAAY,WAC5B,IAAMmT,EAAeC,SAASC,eAAe,YACvCC,EAAYC,OAAOC,eAEzB,GAAiB,MAAbF,EAAJ,CAEA,IAAMG,EAAaH,EAAUG,WAE7B,GAAkB,MAAdA,EAAJ,CACA,IAAMC,EAAgBD,EAAWE,WAOjC,GAJwCR,EAAaS,SACnDF,GAGmC,CACnC,IAAMG,EAAkBP,EAAUQ,WAMlCpB,EAJmC,KAApBmB,EAE6B,KAAlBA,QAM1BnB,EAAuB,UAExB,IAGH/R,qBAAU,WAGR,OAFAyS,SAASW,iBAAiB,UAAWb,GAE9B,kBAAME,SAASY,oBAAoB,UAAWd,MACpD,CAACA,IAW6B9M,eAEjC,OAAIqH,EACK,kBAAC,GAAD,CAAS9L,KAAK,cAGnB,oCACE,kBAAC4K,GAAA,EAAD,CACExI,UAAWZ,EAAQ6O,kBACnBxF,WAAS,EACTyH,WAAW,SACXxH,QAAS,GAET,kBAACF,GAAA,EAAD,CAAMM,MAAI,GACR,kBAAC9H,EAAA,EAAD,mBAEF,kBAACwH,GAAA,EAAD,CAAMM,MAAI,GACR,kBAACqH,GAAA,EAAD,CACEC,QAASrB,EACT/S,SAxBe,WACzBgT,GAAmBD,IAwBT3P,QAAS,CACP8O,WAAY9O,EAAQ8O,WACpBmC,MAAOjR,EAAQgP,YACfgC,QAAShR,EAAQiP,kBAIvB,kBAAC7F,GAAA,EAAD,CAAMM,MAAI,GACR,kBAAC9H,EAAA,EAAD,iBAGS,MAAZyN,EACC,yBAAKzO,UAAWZ,EAAQjB,MACtB,kBAAC,GAAD,CACEhB,aAAc,CACZ5H,OAAQkZ,EAASlZ,OACjBQ,MAAO0Y,EAAS1Y,MAChBhB,OAAQ0Z,EAAS1Z,OACjB0O,aAAcgL,EAASjW,QACvBkL,cAAc,EACdC,UAAW8K,EAASzX,cACpB4M,kBAlDM,aAmDNE,kBAjDM,eAoDR,kBAAC1D,EAAA,EAAD,CACEJ,UAAWqC,aAAKjD,EAAQ2O,kBAAT,eACZ3O,EAAQ4O,yBAA2Be,KAGtC,yBAAK7W,GAAG,WAAW8H,UAAWZ,EAAQkR,UACpC,kBAACtP,EAAA,EAAD,CAAYN,QAAQ,KAAKV,UAAWZ,EAAQkP,WACzCG,EAAShZ,OAEZ,kBAAC,GAAD,CACEoX,aAAc4B,EAASjW,QACvBsU,SAAUiC,MAMhB,kBAAC,GAAD,CAAYnP,KAAMmP,GAChB,kBAAC,GAAD,CAAiB5H,oBAAqBA,OAK5C,mEAOKoJ,GApNM,WACnB,OAAO,kBAAC,GAAD,OCwBMC,GAlEI,WACjB,IAAMC,EAAgB,CACpBC,MAAO,GACPC,SAAU,IAHW,EAMWpV,mBAAS,eAAKkV,IANzB,mBAMhBG,EANgB,KAMLC,EANK,OAOGtV,mBAAS,MAPZ,mBAOhBvD,EAPgB,KAOT8Y,EAPS,KASjBtR,EAAUC,cAiBVzD,EAAW,SAACW,GAChBA,EAAEoK,iBACF8J,EAAa,2BACRD,GADO,kBAETjU,EAAE0L,OAAOzC,KAAOjJ,EAAE0L,OAAOrN,UAQ9B,OACE,kBAACoF,EAAA,EAAD,KACE,kBAACY,EAAA,EAAD,CAAYN,QAAQ,MAApB,WACA,0BAAMqQ,SA9BO,SAACpU,GAChBA,EAAEoK,iBnBYsC,SAAC2J,EAAOC,GAClD,OAAOjc,EAAKsc,2BAA2BN,EAAOC,GmBV5CM,CAF4BL,EAApBF,MAAoBE,EAAbD,UAGZ9G,MAAK,WACJgH,EAAa,eAAKJ,IAClBK,EAAS,MACTtR,EAAQkC,Kf5BI,Qe8BboI,OAAM,SAACnN,GACNmU,EAASnU,QAoBT,2BACEiJ,KAAK,QACL5K,MAAO4V,EAAUF,MACjB1U,SAAUA,EACV4B,KAAK,OACLkQ,YAAY,kBAEd,2BACElI,KAAK,WACL5K,MAAO4V,EAAUD,SACjB3U,SAAUA,EACV4B,KAAK,WACLkQ,YAAY,aAEd,4BAAQvJ,UAtBM,WAClB,MAA2B,KAApBqM,EAAUF,OAAuC,KAAvBE,EAAUD,UAqBP/S,KAAK,UAArC,WAIC5F,GAAS,2BAAIA,EAAMX,YC/DtB4G,GAAYC,YAAW,CAC3BC,KAAM,CACJS,QAAS,OACTqE,eAAgB,SAChBC,WAAY,UAgBDgO,GAZK,WAClB,IAAM9R,EAAUnB,KAEhB,OACE,kBAACmC,EAAA,EAAD,CAAWJ,UAAWZ,EAAQjB,MAC5B,kBAAC6C,EAAA,EAAD,CAAYN,QAAQ,MAApB,4CCPSyQ,GAVG,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,cAAeC,EAA0B,EAA1BA,UAAWvW,EAAe,EAAfA,SAAe,EAC9BS,oBAAS,GADqB,mBACrD+V,EADqD,KAC5CC,EAD4C,KAO5D,OAJA3U,qBAAU,WACR2U,EAAWH,IAAkBC,KAC5B,CAACD,EAAeC,IAEZ,oCAAGC,GAAWxW,I,iFCyDR0W,GAxDI,SAAC,GAAyD,IAAvDtV,EAAsD,EAAtDA,KAAsD,IAAhDuV,gBAAgD,MAArC,SAAC5N,GAAD,OAAOA,GAA8B,MAA3B6N,iBAA2B,MAAf,SAAC7N,GAAD,OAAOA,GAAQ,IAChDtI,mBAAS,IADuC,mBACnEP,EADmE,KAC5D+R,EAD4D,KAmBpE4E,EAAe,SAACpc,EAAQC,GAC5BF,EAAOC,EAAQC,GACZqU,MAAK,SAACvQ,GACLoY,EAAUpY,MAEXwQ,OAAM,SAACnN,GACN5E,QAAQC,MAAM,oCAAqC2E,EAAEtF,YAGzD0V,EAAS,KAGX,OACE,oCACE,0BAAMgE,SA1BW,SAACpU,GAGpB,GAFAA,EAAEoK,iBAEE7K,EAAM,CACR,IAAMzG,EAAQuF,EACRzF,EAAS2G,EAAKE,IAEpBqV,IACAE,EAAapc,EAAQ,CAAEE,MAAOA,OAmB5B,kBAACqQ,GAAA,EAAD,CAAa9N,OAAK,GAChB,kBAACgO,GAAA,EAAD,CACEjF,MAAM,UACN/F,MAAOA,EACPgB,SAnCW,SAACW,GACpBoQ,EAASpQ,EAAE0L,OAAOrN,QAmCVuH,KAAK,QACLkE,WAAY,CACVE,aACE,kBAACC,GAAA,EAAD,CAAgB1G,SAAS,OACvB,kBAACU,EAAA,EAAD,CAAYhD,KAAK,UACd5C,EAAMlD,OAAS,GAAK,kBAAC,KAAD,eCnCnCmG,GAAYC,YAAW,CAC3B0T,YAAa,CACXxT,SAAU,IACVM,SAAU,QACVmT,SAAU,QACVjT,QAAS,OACTkT,cAAe,UAEjBC,cAAe,CACb7S,UAAW,WACX4L,MAAO,QACPlM,QAAS,OACTqE,eAAgB,YAElB+O,UAAW,CACT9S,UAAW,SACXoF,QAAS,UAEX2N,aAAc,GACdC,aAAc,CACZnH,WAAY,wBACZ,UAAW,CACTA,WAAY,kCA+IZoH,GAAW,SAAC,GAAyC,IAAvC9b,EAAsC,EAAtCA,KAAsC,IAAhC+b,mBAAgC,MAAlB,SAACzV,EAAGkH,GAAJ,OAAUA,GAAQ,EAClDzE,EAAUnB,KAChB,OACE,kBAACoU,GAAA,EAAD,CAAMrS,UAAWZ,EAAQ6S,cACtB5b,EAAKic,KAAI,SAACC,GAAD,OACR,kBAACC,GAAA,EAAD,CACEC,IAAKF,EAAQxc,MACb2c,SAAS,EACTC,UAAWC,IACXtS,GAAE,UnB9LY,OmB8LZ,YAAiBiS,EAAQxc,OAC3BqJ,QAAS,CACPqJ,UAAWrJ,EAAQ8S,eAGrB,kBAACW,GAAA,EAAD,CACEC,QAASP,EAAQ/c,KAAKC,MACtBsd,WArBwB7F,EAqBcqF,EAAQ/c,KAAKc,WApBhD,IAAIa,KAAyB,IAApB+V,EAAU8F,SACpBC,wBAqBJ,kBAACC,GAAA,EAAD,KACE,kBAACtS,EAAA,EAAD,CAAYC,QAAS,SAAClE,GAAD,OAAOyV,EAAYzV,EAAG4V,EAAQxc,SACjD,kBAAC,KAAD,SAzBqB,IAACmX,OAwCrBiG,GA7KE,SAAC,GAAc,IAAZjX,EAAW,EAAXA,KACZkD,EAAUnB,KACVmV,EAAcrX,iBAAO,MAFE,EAGLR,mBAAS,MAHJ,mBAGtBlF,EAHsB,KAGhBgd,EAHgB,OAIC9X,oBAAS,GAJV,mBAItBuT,EAJsB,KAIbwE,EAJa,OAKK/X,oBAASlF,GALd,mBAKtBqT,EALsB,KAKXC,EALW,OAMYnM,KANZ,mBAMtB6B,EANsB,KAMVuP,EANU,KAS7BhS,qBAAU,WvBqBsB,IAACrH,EuBpBnB,MAAR2G,IAEFyN,GAAa,IvBkBgBpU,EuBjBV2G,EAAKE,IvBkBrB3H,EAAGQ,WAAWjB,GAA2BkB,IAAIK,GAAQJ,OuBjBrD0U,MAAK,SAACtN,GACL,IAAKA,EAAS9E,OAKZ,OAJAM,QAAQK,MACN,uHAEFuR,GAAa,GAIfyJ,EAAY/W,QAAUE,EAAS/G,OAC/BuC,QAAQK,MACN,iEACAmE,EAAS/G,QAGX,IAAM8D,EAAMia,EAAoBhX,EAAS/G,OAAOa,MAEhD0B,QAAQK,MAAM,sBAAuBkB,GAEjCka,EAAaJ,EAAY/W,WAC3BgX,EAAQ/Z,GACRqQ,GAAa,OAGhBG,OAAM,SAACnN,GACN5E,QAAQC,MACN,iDACA2E,EAAEtF,eAIT,CAAC6E,EAAM4S,IAMV,IAAMyE,EAAsB,SAACE,GAM3B,IAJA,IAEIna,EAAM,GAEV,MAJgB1B,OAAO8b,QAAQD,GAI/B,eAAoC,CAAC,IAAD,sBAAxBhB,EAAwB,KAAnBzX,EAAmB,KAClC1B,EAAIoI,KAAK,CAAE3L,MAAO0c,EAAKjd,KAAMwF,IAG/B,OAAO1B,GAGHka,EAAe,SAACJ,GAEpB,OAAO,GAqCT,OAAK1J,EAsBD,yBAAK1J,UAAWZ,EAAQwS,aACtB,kBAAC,GAAD,CAAShU,KAAK,eArBhB,yBAAKoC,UAAWZ,EAAQwS,aACtB,yBAAK5R,UAAWZ,EAAQ2S,eACtB,kBAAC4B,GAAD,CACEzX,KAAMA,EACNuV,SAxCe,WACvB9H,GAAa,IAwCL+H,UArCY,SAACkC,GACjBA,GACFN,GAAYxE,OAuCD,MAARzY,GAAgBA,EAAKyB,OAAS,EAC7B,kBAAC,GAAD,CAAUzB,KAAMA,EAAM+b,YAnCV,SAACrS,EAAOhK,GAC1BgK,EAAMgH,iBAEO,MAAThR,IACF4T,GAAa,GACbrS,EAAU4E,EAAKE,IAAKrG,GACjB8T,MAAK,WAEJyJ,GAAYxE,GAERzP,EAAW/B,UAAUvH,QAAUA,GACjC6Y,EAAmB,CACjBhR,KAAMZ,GAAYE,sBAIvB4M,OAAM,SAAC9R,GACND,QAAQC,MAAM,qCAAsCA,EAAMX,gBAoB1D,yBAAK2I,UAAWZ,EAAQ4S,WAAxB,2C,qBC5JJ/T,GAAYC,YAAW,CAC3B2V,gBAAiB,CACfjV,QAAS,OACTkT,cAAe,SACf7O,eAAgB,eAChBiN,WAAY,SACZpF,MAAO,QACP9I,OAAQ,SAEV8R,iBAAkB,CAChBlV,QAAS,OACTqE,eAAgB,eAChB6H,MAAO,UA4BIiJ,GAxBK,WAClB,IAAM3U,EAAUnB,KAEhB,OACE,yBAAK+B,UAAWZ,EAAQyU,iBACtB,6BACE,kBAAC7S,EAAA,EAAD,CAAYN,QAAQ,MAClB,kBAAC,KAAD,CAAU3B,SAAS,UADrB,UAKF,6BACE,kBAACiC,EAAA,EAAD,CAAYN,QAAQ,SAApB,iDAIF,yBAAKV,UAAWZ,EAAQ0U,kBACtB,kBAAC,IAAD,cACA,kBAAC,IAAD,mBCxBF7V,GAAYC,YAAW,CAC3B8V,aAAc,CACZpV,QAAS,OACTqE,eAAgB,SAChBC,WAAY,UA8CD+Q,GA1CE,WACf,IAAM7U,EAAUnB,KACA/B,EAASd,KAAjBZ,OACFuC,EAAoB1B,KAe1B,OACE,yBAAK2E,UAAWZ,EAAQ4U,cACtB,kBAAC,GAAD,CACE5C,cAAerU,EACfsU,UAAWvX,EAAoBE,MAE/B,kBAAC,GAAD,OAEF,kBAAC,GAAD,CACEoX,cAAerU,EACfsU,UAAWvX,EAAoBG,eAIjC,kBAAC,GAAD,CACEmX,cAAerU,EACfsU,UAAWvX,EAAoBI,YAtBjC,oCACE,kBAAC,GAAD,CAAUgC,KAAMA,Q,oDC3BlB+B,GAAYC,YAAW,CAC3BgW,cAAe,GACfC,gBAAiB,CACf7P,QAAS,OAEX8P,UAAW,CACTpV,MAAO,WAqEIqV,GAjEK,SAAC,GAAgD,IAA9CnY,EAA6C,EAA7CA,KAAMnG,EAAuC,EAAvCA,MAAuC,IAAhCue,sBAAgC,MAAf,SAACzQ,GAAD,OAAOA,GAAQ,EAC5DzE,EAAUnB,KADkD,EAExC1C,mBAAS,IAF+B,mBAE3DP,EAF2D,KAEpD+R,EAFoD,KAuB5DwH,EAAgB,SAAChf,EAAQQ,EAAOP,GACpC8C,EAAQ/C,EAAQQ,EAAOP,GACpBqU,MAAK,SAACvQ,GACLgb,EAAehb,MAEhBwQ,OAAM,SAAC9R,GACND,QAAQC,MAAM,sCAAuCA,EAAMX,YAG/D0V,EAAS,KAGX,OACE,oCACE,kBAACjH,GAAA,EAAD,CAAa9N,OAAK,GAChB,kBAACgO,GAAA,EAAD,CACEtF,QAAQ,WACR1F,MAAOA,EACP8S,YAAY,QACZ9R,SAtCa,SAACW,GACpBoQ,EAASpQ,EAAE0L,OAAOrN,QAsCZuH,KAAK,QACLvC,UAAWZ,EAAQ8U,cACnBzN,WAAY,CACVE,aACE,kBAACC,GAAA,EAAD,CAAgB1G,SAAS,OACvB,kBAACU,EAAA,EAAD,CACEC,QAzCK,SAAClE,GAGpB,GAFAA,EAAEoK,iBAEE7K,GAAQnG,EAAO,CACjB,IAAMN,EAAQuF,EACRzF,EAAS2G,EAAKE,IAMpBmY,EAAchf,EAAQQ,EAAO,CAAEN,MAAOA,MA+B1BuK,UAAWZ,EAAQ+U,iBAElBnZ,EAAMlD,OAAS,GACd,kBAAC,KAAD,CAAWkI,UAAWZ,EAAQgV,oBCpD5CnW,GAAYC,YAAW,CAC3BsW,cAAe,CACb1J,MAAO,SAET2J,iBAAkB,CAChBxR,eAAgB,gBAChBkH,UAAW,OACXD,aAAc,QAEhBwK,kBAAmB,CACjBtQ,OAAQ,oBACR2G,WAAY,oBACZ0B,oBAAqB,MACrBkI,uBAAwB,MACxBzK,aAAc,QACd,UAAW,CACTa,WAAY,sBAGhB6J,cAAe,CACbC,eAAgB,OAChB7V,MAAO,WAET8V,yBAA0B,CACxBC,WAAY,SAEdC,qBAAsB,CACpB9K,aAAc,MACd+K,aAAc,IACdhS,eAAgB,YAElBiS,uCAAwC,CACtCC,MAAO,SA6MIC,GAzMG,SAAC,GAAqB,IAAnBrf,EAAkB,EAAlBA,MAAOmG,EAAW,EAAXA,KACpBkD,EAAUnB,KADqB,EAEP1C,mBAAS,MAFF,mBAE9B8Z,EAF8B,KAErBC,EAFqB,OAGX/Z,mBAAS,MAHE,mBAG9B1E,EAH8B,KAGvB0e,EAHuB,OAIHha,oBAAS1E,GAJN,mBAI9B6S,EAJ8B,KAInBC,EAJmB,OAKPpO,oBAAS,GALF,mBAK9BuT,EAL8B,KAKrBwE,EALqB,OAMI9V,KANJ,mBAMlBoR,GANkB,aAOmBrT,mBAAS,MAP5B,mBAO9Bia,EAP8B,KAORC,EAPQ,KASrC7Y,qBAAU,WACK,MAAT7G,GAAkC,KAAjBA,EAAMJ,SAK3BgU,GAAa,G3BYiB,SAAC5T,GACjC,OAAOtB,EAAGQ,WAAWjB,GAA2BkB,IAAIa,GAAOZ,M2BXzDugB,CAAmB3f,GAChB8T,MAAK,SAACtN,GACL,IAAKA,EAAS9E,OACZ,MAAM,IAAI/B,MAAJ,qDAC0CK,IAUlD,GANAuf,EAAW,CACT7f,MAAO8G,EAAS/G,OAAOkB,SACvBC,YAAa4F,EAAS/G,OAAOmB,YAC7BC,UAAW2F,EAAS/G,OAAOoB,WAAa,MAGpC,UAAW2F,EAAS/G,QACxB,MAAM,IAAIE,MACR,kEAMJ,IAAI4D,EAAM,GACN1B,OAAOC,KAAK0E,EAAS/G,OAAOqB,OAAOiB,OAAS,GAC9CwB,EAAMqc,EAAqBpZ,EAAS/G,OAAOqB,SAEhCyC,EAAIxB,OAAS,GACtByd,EAASjc,GAGXic,EAAS,MAKX3G,EAAmB,CACjBhR,KAAMZ,GAAYC,kBAClBY,QAAS,CACP9H,MAAOwG,EAASrE,GAChBzC,MAAO8G,EAAS/G,OAAOkB,YAG3BiT,GAAa,MAEdG,OAAM,SAACnN,GACN5E,QAAQC,MACN,0DACA2E,EAAEtF,SAEJsS,GAAa,SAEhB,CAAC5T,EAAO+Y,IAEX,IAAM6G,EAAuB,SAACC,GAG5B,IAFA,IACItc,EAAM,GACV,MAFgB1B,OAAO8b,QAAQkC,GAE/B,eAAoC,CAAC,IAAD,sBAAxBnD,EAAwB,KAAnBzX,EAAmB,KAClC1B,EAAIoI,KAAK,CAAE3M,OAAQ0d,EAAKjd,KAAMwF,IAEhC,OAAO1B,GAGHgb,EAAiB,SAACuB,GAClBA,IACFvC,GAAYxE,GACZgH,MAoBEC,EAAwB,SAACpZ,GAC7B8Y,EAAwB9Y,EAAEmE,gBAGtBgV,EAAwB,WAC5BL,EAAwB,OAGpBO,EAAqBnW,QAAQ2V,GAyCnC,OAAK9L,EA2CD,oCACE,kBAAC,GAAD,CAAS9L,KAAK,YAAYmE,UAAU,KA1CtC,oCAvCA,kBAAC1B,EAAA,EAAD,CAASL,UAAWZ,EAAQqV,kBAC1B,6BACE,kBAACzT,EAAA,EAAD,CAAYN,QAAQ,aACjB2U,EAAQ1e,YADX,kBACgC0e,EAAQ1e,YAAc,EAAI,IAAM,MAGlE,6BACE,kBAACsW,GAAA,EAAD,CAASxX,MAAM,YACb,kBAAC8K,EAAA,EAAD,CAAQM,QAASkV,GACf,kBAAC,KAAD,QAIJ,kBAACE,GAAA,EAAD,CACErW,KAAMoW,EACNxU,QAASsU,EACTpW,SAAU8V,EACVrU,aAAc,CACZC,SAAU,SACVC,WAAY,UAEdE,gBAAiB,CACfH,SAAU,MACVC,WAAY,UAGd,kBAAC6U,GAAD,CACEha,KAAMA,EACNnG,MAAOA,EACPue,eAAgBA,OAYtB,kBAACjC,GAAA,EAAD,CAAMrS,UAAWZ,EAAQoV,eACZ,OAAV3d,GACC,oCACGA,EAAMyb,KAAI,SAAC6D,GAAD,OACT,kBAAC3D,GAAA,EAAD,CACEC,IAAK0D,EAAKphB,OACVqK,QAAS,CACPqJ,UAAWrJ,EAAQsV,oBAGrB,kBAAC,IAAD,CACEpU,GAAE,UvB/NG,QuB+NH,YAAkB6V,EAAKphB,QACzBiL,UAAWZ,EAAQwV,eAEnB,kBAAC/B,GAAA,EAAD,CACEC,QAASqD,EAAK3gB,KAAKC,MACnB2gB,uBAAwB,CACtBpW,UAAWZ,EAAQ0V,6BAIzB,kBAAC5B,GAAA,EAAD,CACElT,UAAWZ,EAAQ8V,wCAEnB,kBAACjI,GAAA,EAAD,CAASxX,MAAM,UACb,kBAACmL,EAAA,EAAD,CAAYC,QAAS,SAAClE,GAAD,OA9FpB,SAACA,EAAG5H,GACT,MAAVA,GAA2B,MAATgB,GACpBgC,QAAQC,MACN,oEAIJ,IACES,EAAW1D,EAAQgB,GAAO8T,MAAK,SAACvQ,GAC9BA,GAAOga,GAAYxE,MAErB,MAAO9W,GACPD,QAAQC,MAAM,oCAAqCA,EAAMX,UAkFbgf,CAAa1Z,EAAGwZ,EAAKphB,UAC/C,kBAAC,KAAD,iB,8FCrOlBkJ,GAAYC,YAAW,CAC3BoY,kBAAmB,GACnBC,aAAc,GACdC,UAAW,CACTlS,QAAS,UACT6F,UAAW,QACXnI,OAAQ,OACRpD,QAAS,OACTkT,cAAe,SACf7O,eAAgB,SAChBoD,UAAW,UAEboQ,gBAAiB,CAEfxT,eAAgB,YAmCLyT,GA/BE,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,KAAoC,IAA9BC,oBAA8B,MAAf,SAAC/S,GAAD,OAAOA,GAAQ,EAChDzE,EAAUnB,KAMhB,OACE,kBAACuK,GAAA,EAAD,CAAMC,WAAS,EAACzI,UAAWZ,EAAQkX,kBAAmB5N,QAAS,GAC7D,kBAACF,GAAA,EAAD,CAAMM,MAAI,EAAC9I,UAAWZ,EAAQmX,aAAcM,GAAI,EAAG9N,GAAI,IACrD,kBAAC+N,GAAA,EAAD,CAAO9W,UAAWZ,EAAQoX,UAAWrW,UAAW,GAC9C,kBAACa,EAAA,EAAD,CAAYN,QAAQ,MAAMiW,EAAKzd,YAGnC,kBAACsP,GAAA,EAAD,CAAMM,MAAI,EAAC9I,UAAWZ,EAAQmX,aAAcM,IAAE,EAAC9N,IAAE,GAC/C,kBAAC+N,GAAA,EAAD,CAAO9W,UAAWZ,EAAQoX,UAAWrW,UAAW,GAC9C,kBAACa,EAAA,EAAD,CAAYN,QAAQ,SAASiW,EAAKxd,YAGtC,kBAACqP,GAAA,EAAD,CAAMM,MAAI,EAAC9I,UAAWZ,EAAQqX,gBAAiBI,GAAI,EAAG9N,GAAI,IACxD,kBAACnI,EAAA,EAAD,KACE,kBAAC,KAAD,OAEF,kBAACA,EAAA,EAAD,CAAYC,QApBG,WACnB+V,EAAaD,EAAKvd,UAoBZ,kBAAC,KAAD,UClCJ6E,GAAYC,YAAW,CAC3B6Y,gBAAiB,CACf9T,eAAgB,gBAChBkH,UAAW,OACXD,aAAc,QAEhB8M,iBAAkB,CAChB1S,QAAS,UACT4F,aAAc,OACd+M,WAAY,YAEdC,oBAAqB,CACnBD,WAAY,cA6KDE,GAzKE,SAAC,GAAe,IAAbphB,EAAY,EAAZA,MACZqJ,EAAUnB,KADc,EAEE1C,mBAAS,MAFX,mBAEvB6b,EAFuB,KAEbC,EAFa,OAGJ9b,mBAAS,MAHL,mBAGvBnE,EAHuB,KAGhBkgB,EAHgB,OAII/b,oBAASnE,GAJb,mBAIvBsS,EAJuB,KAIZC,EAJY,OAKApO,oBAAS,GALT,mBAKvBuT,EALuB,KAKdwE,EALc,OAMQ/X,oBAAS,GANjB,mBAMvBgc,EANuB,KAMVC,EANU,KAQ9B5a,qBAAU,WACK,MAAT7G,GAAkC,KAAjBA,EAAMJ,SAK3BgU,GAAa,G7B8CiB,SAAC5T,GACjC,OAAOtB,EAAGQ,WAAWjB,GAA2BkB,IAAIa,GAAOZ,M6B9CzDsiB,CAAmB1hB,GAChB8T,MAAK,SAACtN,GACL,IAAKA,EAAS9E,OACZ,MAAM,IAAI/B,MAAJ,qDAC0CK,IAUlD,GANAshB,EAAY,CACV3gB,SAAU6F,EAAS/G,OAAOkB,SAC1BK,YAAawF,EAAS/G,OAAOuB,YAC7BC,cAAeuF,EAAS/G,OAAOwB,kBAG3B,UAAWuF,EAAS/G,QACxB,MAAM,IAAIE,MACR,kEAMJ,IAAI4D,EAAM,GACN1B,OAAOC,KAAK0E,EAAS/G,OAAO4B,OAAOU,OAAS,GAC9CwB,EAAMoe,EAAqBnb,EAAS/G,OAAO4B,SAEhCkC,EAAIxB,OAAS,GACtBwf,EAAShe,GAGXge,EAAS,MAEX3N,GAAa,MAEdG,OAAM,SAAC9R,GACND,QAAQC,MACN,wDACAA,EAAMX,SAERsS,GAAa,SAEhB,CAAC5T,EAAO+Y,IAEX,IAAM4I,EAAuB,SAACC,GAG5B,IAFA,IACIre,EAAM,GACV,MAFgB1B,OAAO8b,QAAQiE,GAE/B,eAAoC,CAAC,IAAD,sBAAxBlF,EAAwB,KAAnBzX,EAAmB,KAClC1B,EAAIoI,KAAK,CAAEtI,OAAQqZ,EAAKjd,KAAMwF,IAEhC,OAAO1B,GAGHsd,EAAe,SAACxd,GACpB,IACE,GAAc,MAAVA,GAAoC,KAAlBA,EAAOzD,OAI3B,YAHAoC,QAAQC,MACN,yEAIJqB,EAAWD,EAAQrD,GAAO8T,MAAK,SAACvQ,GAC9Bga,GAAYxE,MAEd,MAAO9W,GACPD,QAAQC,MAAR,8CAAqDA,EAAMX,YAIzDmW,EAAU,WACd,OACE,kBAACnN,EAAA,EAAD,CAASL,UAAWZ,EAAQ2X,iBAC1B,6BACE,kBAAC/V,EAAA,EAAD,CAAYN,QAAQ,aACjB0W,EAASrgB,YAAa,IADzB,cAEUqgB,EAASrgB,YAAc,EAAI,IAAM,MAG7C,6BACE,kBAACkW,GAAA,EAAD,CACExX,MACE8hB,EAAc,sBAAwB,0BAGxC,kBAAChX,EAAA,EAAD,CACEM,QAAS,WACP2W,GAAgBD,KAGjBA,EACC,kBAAC,KAAD,CAAgBK,IAAI,SAEpB,kBAAC,KAAD,WASd,OAAKlO,EA+CD,oCACE,kBAAC,GAAD,CAAS9L,KAAK,YAAYmE,UAAU,KA/C3B,MAAT3K,EACK,qCAGLmgB,EAEA,oCACG/J,IACD,kBAAC6E,GAAA,EAAD,KACGjb,EAAMkb,KAAI,SAACqE,GAAD,OACT,kBAACnE,GAAA,EAAD,CACEC,IAAKkE,EAAKvd,OACV4G,UAAWZ,EAAQ8X,qBAEnB,kBAAC1O,GAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,GAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GACZ4N,EAAKnhB,KAAK0D,UAEb,kBAACsP,GAAA,EAAD,CAAMM,MAAI,EAACC,IAAE,GACV4N,EAAKnhB,KAAK2D,iBAUvB,oCACGqU,IACD,kBAAC6E,GAAA,EAAD,KACGjb,EAAMkb,KAAI,SAACqE,GAAD,OACT,kBAACnE,GAAA,EAAD,CAAUC,IAAKkE,EAAKvd,OAAQ4G,UAAWZ,EAAQ4X,kBAC7C,kBAAC,GAAD,CACEL,KAAI,aAAIvd,OAAQud,EAAKvd,QAAWud,EAAKnhB,MACrCohB,aAAcA,WCnK1B3Y,GAAYC,YAAW,CAC3BC,KAAM,CACJ+E,WAAY,QAEdoT,kBAAmB,CAEjBrT,eAAgB,UAElB4U,kBAAmB,GAGnBC,iBAAkB,GAGlBC,eAAgB,CACdC,gBAAiB,iBACjBzZ,aAAc,qBA6DH0Z,GAzDC,WACd,IAAM7Y,EAAUnB,KACA/B,EAASd,KAAjBZ,OACFuC,EAAoB1B,KACdtF,EAAUyY,cAAdtW,GAJY,EAMqBsF,KANrB,mBAMb6B,EANa,UAmCpB,OACE,kBAACe,EAAA,EAAD,KACE,kBAAC,GAAD,CACEgR,cAAerU,EACfsU,UAAWvX,EAAoBE,MAFjC,kBAMA,kBAAC,GAAD,CACEoX,cAAerU,EACfsU,UAAWvX,EAAoBG,eAEjC,kBAAC,GAAD,CACEmX,cAAerU,EACfsU,UAAWvX,EAAoBI,YArCjC,yBAAK8F,UAAWZ,EAAQjB,MACtB,kBAAC6C,EAAA,EAAD,CAAYN,QAAQ,MACjBrB,EAAW/B,WAAa+B,EAAW/B,UAAU7H,OAEhD,6BACA,kBAAC+S,GAAA,EAAD,CAAMC,WAAS,EAACzI,UAAWZ,EAAQkX,kBAAmB5N,QAAS,GAC7D,kBAACF,GAAA,EAAD,CAAMM,MAAI,EAAC9I,UAAWZ,EAAQyY,kBAAmBK,GAAI,EAAGnP,GAAI,IAC1D,kBAAC/H,EAAA,EAAD,CAAYN,QAAQ,KAAKV,UAAWZ,EAAQ2Y,gBAA5C,SAGA,kBAAC,GAAD,CAAWhiB,MAAOA,EAAOmG,KAAMA,KAEjC,kBAACsM,GAAA,EAAD,CAAMM,MAAI,EAAC9I,UAAWZ,EAAQ0Y,iBAAkBI,IAAE,EAACnP,IAAE,GACnD,kBAAC/H,EAAA,EAAD,CAAYN,QAAQ,KAAKV,UAAWZ,EAAQ2Y,gBAA5C,QAGA,kBAAC,GAAD,CAAUhiB,MAAOA,UC7CvBkI,GAAYC,YAAW,CAC3BC,KAAM,CACJ+E,WAAY,OACZiV,cAAe,SAEjBC,SAAU,CACRjK,gBAAiB,8BAgENkK,GA5DH,WACV,IAAMjZ,EAAUnB,KAIVqa,EAAQ,U3BxCS,Q2BwCT,QAERC,EAAO,U3BxCS,O2BwCT,QAPG,EAeZjd,KALFH,EAVc,EAUdA,aACAd,EAXc,EAWdA,YACAE,EAZc,EAYdA,YACAC,EAbc,EAadA,OACAuC,EAdc,EAcdA,kBAGIpC,EAAmB,CACvBQ,aAAcA,EACdd,YAAaA,GAETO,EAAc,CAClBL,YAAaA,EACbC,OAAQA,GAGV,OAAIW,EAEA,kBAACqd,GAAA,EAAD,CAAU5Y,KAAMzE,EAAc6E,UAAWZ,EAAQgZ,UAC/C,kBAAC,GAAD,OAKF,kBAAC,IAAD,KACE,kBAAC,GAAD,CACEzd,iBAAkBA,EAClBC,YAAaA,EACbC,uBAAwBkC,GAExB,kBAAC,GAAD,KACE,kBAAC,GAAD,MACA,yBAAKiD,UAAWZ,EAAQjB,MACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsa,OAAK,EAACC,K3BhFT,I2BgF4B/F,UAAWxP,KAC3C,kBAAC,IAAD,CAAOuV,K3B/EE,Q2B+EsB/F,UAAWsB,KAC1C,kBAAC,IAAD,CAAOyE,KAAMH,EAAS5F,UAAWsF,KACjC,kBAAC,IAAD,CAAOS,KAAMJ,EAAU3F,UAAWpC,KAClC,kBAAC,IAAD,CAAOmI,K3BnFE,Q2BmFsB/F,UAAWpC,KAC1C,kBAAC,IAAD,CAAOmI,K3BjFI,U2BiFsB/F,UAAWnC,KAC5C,kBAAC,IAAD,CAAOkI,K3BjFK,W2BiFsB/F,UAAWzB,WC1EzCrR,QACW,cAA7B2P,OAAOlQ,SAASqZ,UAEe,UAA7BnJ,OAAOlQ,SAASqZ,UAEhBnJ,OAAOlQ,SAASqZ,SAASC,MACvB,2D,OCTNC,IAASC,OACP,kBAAC,EAAgB/d,SAAjB,CAA0BC,MAAOvG,GAC/B,kBAAC,GAAD,OAEF4a,SAASC,eAAe,SDsHpB,kBAAmByJ,WACrBA,UAAUC,cAAcC,MACrBpP,MAAK,SAAAqP,GACJA,EAAaC,gBAEdrP,OAAM,SAAA9R,GACLD,QAAQC,MAAMA,EAAMX,c","file":"static/js/main.6ef096c5.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\n\n/* use React's Context API to provide a Firebase instance once at the top-level of your component hierarchy */\n\nconst FirebaseContext = React.createContext(null);\n\n// useFirebase hook that allows us to access our FirebaseContext\nexport const useFirebase = () => {\n  return useContext(FirebaseContext);\n};\n\nexport default FirebaseContext;\n\n// Higher order component\n/* The HOC takes the original Component as its parameter and it returns an updated component\nexport const withFirebase = (Component) => (props) => (\n  <FirebaseContext.Consumer>\n    {(firebase) => <Component {...props} firebase={firebase} />}\n  </FirebaseContext.Consumer>\n);\n*/\n\n/*\nSimilar to writing:\n\nexport const withFirebase = function(OriginalComponent) {\n    return (\n        const NewComponent = function(props) {\n            return (\n                <Context>\n                    <OrginalComponent newProps=newProps />\n                </ Context>\n            )\n        }\n        return NewComponent\n    )\n}\n\n\n*/\n","import * as firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDbYsgfn--OVImQkitEy5dzsoFgiqCdWvY\",\n  authDomain: \"my-textbook-7d4db.firebaseapp.com\",\n  databaseURL: \"https://my-textbook-7d4db.firebaseio.com\",\n  projectId: \"my-textbook-7d4db\",\n  storageBucket: \"my-textbook-7d4db.appspot.com\",\n  messagingSenderId: \"685663840714\",\n  appId: \"1:685663840714:web:a82aef34bd87490e7bc733\",\n};\n\nexport const ROOT_COLLECTION = {\n  USERS: \"users\",\n  NOTES: \"notes\",\n  USER_SETS: \"user-sets\",\n  SET_NOTES: \"set-notes\",\n  SET_CARDS: \"set-cards\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const db = firebase.firestore();\nconst auth = firebase.auth();\n\n// ~-~-~-~-~-~-~-~-~-~-~- Auth -~-~-~-~-~-~-~-~-~-~-~\n\nexport const doCreateUserWithEmailAndPassword = (email, password) => {\n  return auth.createUserWithEmailAndPassword(email, password);\n};\n\nexport const doSignInWithEmailAndPassword = (email, password) => {\n  return auth.signInWithEmailAndPassword(email, password);\n};\n\nexport const doSignOut = () => auth.signOut();\n\nexport const currentUser = () => auth.currentUser;\n\nexport const onAuthStateChanged = (callback) => {\n  return auth.onAuthStateChanged(callback);\n};\n\n// ~-~-~-~-~-~-~-~-~-~-~- Firestore -~-~-~-~-~-~-~-~-~-~-~\n\nexport const userByUid = (uid) => {\n  return db.collection(ROOT_COLLECTION.USERS).where(\"uid\", \"==\", uid).get();\n};\n\nexport const onSnapshotUserById = (id, callback) => {\n  return db\n    .collection(ROOT_COLLECTION.USERS)\n    .doc(id)\n    .onSnapshot(callback, (err) => {\n      throw new Error(\"Encountered error:\", err);\n    });\n};\n\nexport const getNoteById = async (noteId) => {\n  return await db.collection(ROOT_COLLECTION.NOTES).doc(noteId).get();\n};\n\nexport const getSetForNoteId = async (noteId) => {\n  return await db\n    .collection(ROOT_COLLECTION.SET_NOTES)\n    .where(`notes.${noteId}.title`, \">\", \"\")\n    .get();\n};\n\n/**\n * Retrieves a document from the 'user-sets' collection\n * @param  {String} userId The userId used as the document key\n * @return {Promise}      A Promise resolved with a DocumentSnapshot containing the current document contents.\n */\nexport const getDocFromUserSets = (userId) => {\n  return db.collection(ROOT_COLLECTION.USER_SETS).doc(userId).get();\n};\n\n/**\n * Retrieves a document from the 'set-notes' collection\n * @param  {String} setId The setId used as the document key\n * @return {Promise}      A Promise resolved with a DocumentSnapshot containing the current document contents.\n */\nexport const getDocFromSetNotes = (setId) => {\n  return db.collection(ROOT_COLLECTION.SET_NOTES).doc(setId).get();\n};\n\n/**\n * Retrieves a document from the 'set-cards' collection\n * @param  {String} setId The setId used as the document key\n * @return {Promise}      A Promise resolved with a DocumentSnapshot containing the current document contents.\n */\nexport const getDocFromSetCards = (setId) => {\n  return db.collection(ROOT_COLLECTION.SET_CARDS).doc(setId).get();\n};\n\n/**\n * Updates and/or creates if necessary, documents in the following collections: 'user-sets', 'set-notes', and 'set-cards', to represent a new set with unique setId for this user\n * @param  {String} userId The userId used as the document key for the 'user-sets' collection\n * @param  {Object} data Object holding the set data, needs at least a 'title' key and value\n * @return {Boolean}      A boolean representing the result of the atomic transaction (all completed or all failed)\n */\nexport const addSet = async (userId, data) => {\n  const { title } = data;\n\n  if (!userId) {\n    throw new Error(\"No userId!\");\n  }\n  if (data == null || title.trim() === \"\") {\n    throw new Error(\"Insufficient data to add new set to database\");\n  }\n\n  // ensure atomicity\n  try {\n    await db.runTransaction(async (t) => {\n      // locate the user's 'user-sets' doc or, if null, a new doc will be generated\n      const ref_userSetsDoc = db\n        .collection(ROOT_COLLECTION.USER_SETS)\n        .doc(userId);\n\n      // create a new setId\n      const setId = firestoreAutoId();\n\n      // UPDATE USER-SETS\n      await t.set(\n        ref_userSetsDoc,\n        {\n          sets_count: firebase.firestore.FieldValue.increment(1),\n          sets: {\n            [setId]: {\n              title: title,\n              created_on: firebase.firestore.FieldValue.serverTimestamp(),\n            },\n          },\n        },\n        { merge: true }\n      );\n\n      // ADD NEW DOC TO SET-NOTES\n      const ref_setNotesDoc = db\n        .collection(ROOT_COLLECTION.SET_NOTES)\n        .doc(setId);\n\n      await t.set(ref_setNotesDoc, {\n        setTitle: title,\n        userId: userId,\n        notes_count: 0,\n        max_notes: 5,\n        notes: {},\n      });\n\n      // ADD NEW DOC to SET-CARDS\n\n      const ref_setCardsDoc = db\n        .collection(ROOT_COLLECTION.SET_CARDS)\n        .doc(setId);\n\n      await t.set(ref_setCardsDoc, {\n        setTitle: title,\n        userId: userId,\n        cards_count: 0,\n        last_modified: firebase.firestore.Timestamp.fromDate(new Date()),\n        cards: {},\n      });\n    });\n  } catch (error) {\n    throw new Error(\"Transaction failed for addSet: \", error.message);\n  }\n  return true;\n};\n\n/**\n * Removes set related documents or fields of documents in the following collections: 'user-sets', 'set-notes', and 'set-cards', as well as\n * all documents in the Notes collection that reference the given setId\n * @param  {String} userId The userId used as the document key for the 'user-sets' collection\n * @param  {String} setId The setId used throughout the collections that reference this set\n * @return {Boolean}      A boolean representing the result of the atomic transaction (all completed or all failed)\n */\nexport const removeSet = async (userId, setId) => {\n  if (\n    userId == null ||\n    setId == null ||\n    userId.trim() === \"\" ||\n    setId.trim() === \"\"\n  ) {\n    throw new Error(\"Missing userId and/or setId, can't remove set\");\n  }\n\n  // ensure atomicity\n  try {\n    await db.runTransaction(async (t) => {\n      // remove the doc in 'set-cards'\n      const ref_setCardsDoc = db\n        .collection(ROOT_COLLECTION.SET_CARDS)\n        .doc(setId);\n      await t.delete(ref_setCardsDoc);\n\n      /* Remove all documents in 'notes' collection with this setId field.\n      Since we are billed for all the documents matched by a query, let's just\n      query the 'set-notes' document x1, get the noteId's from that, and then\n      perform the delete operation on the 'notes' collection with this array of noteId's\n      */\n      const snap = await db\n        .collection(ROOT_COLLECTION.SET_NOTES)\n        .doc(setId)\n        .get();\n      if (!snap.exists) {\n        throw new Error(\"Could not located the 'set-notes' document\");\n      }\n\n      const notesObj = snap.data().notes || null;\n      if (notesObj == null) {\n        throw new Error(\"Missing 'notes' object in the 'set-notes' document\");\n      }\n\n      // get array of noteIds\n      const noteIds = Object.keys(notesObj);\n\n      if (noteIds.length !== snap.data().notes_count) {\n        console.error(\n          \"firebase.js: removeSet() WARNING: the number of noteId's in the notes object does not match the notes_count field\"\n        );\n      }\n\n      if (noteIds.length > 0) {\n        noteIds.forEach(async (id) => {\n          const ref_note = db.collection(ROOT_COLLECTION.NOTES).doc(id);\n          await t.delete(ref_note);\n        });\n        console.debug(\n          `firebase.js removeSet() will remove ${noteIds.length} doc(s) from 'notes' collection`\n        );\n      }\n\n      // Remove doc in 'set-notes' now that we are done using it\n      const ref_setNotesDoc = db\n        .collection(ROOT_COLLECTION.SET_NOTES)\n        .doc(setId);\n      await t.delete(ref_setNotesDoc);\n\n      // locate associated 'user-sets' document and remove this key-value pair in the sets object\n      const ref_userSetsDoc = db\n        .collection(ROOT_COLLECTION.USER_SETS)\n        .doc(userId);\n\n      await t.update(ref_userSetsDoc, {\n        sets_count: firebase.firestore.FieldValue.increment(-1),\n        [`sets.${setId}`]: firebase.firestore.FieldValue.delete(),\n      });\n    });\n  } catch (error) {\n    throw new Error(`Transaction failed for removeSet: ${error.message}`);\n  }\n  return true;\n};\n\n/**\n * Updates and/or creates if necessary, documents in the following collections: 'set-notes' and 'notes', to represent a new note for this set\n * @param  {String} userId The userId to associate (as owner) with this note\n * @param  {String} setId The setId that this note belongs to\n * @param  {Object} data Object holding the note data, needs at least a 'title' key and value\n * @return {Boolean}      A boolean representing the result of the atomic transaction (all completed or all failed)\n */\nexport const addNote = async (userId, setId = null, data) => {\n  const { title } = data;\n\n  if (userId == null) {\n    throw new Error(\"No userId!\");\n  } else if (setId == null) {\n    throw new Error(\"No setId!\");\n  } else if (data == null || title.trim() === \"\") {\n    throw new Error(\"Insufficient data to create new Note\");\n  }\n\n  // ensure atomicity\n  try {\n    await db.runTransaction(async (t) => {\n      // Add a new doc to the 'notes' collection, generating a unique noteId\n      const ref_newNote = db.collection(ROOT_COLLECTION.NOTES).doc();\n\n      await t.set(ref_newNote, {\n        setId: setId,\n        userId: userId,\n        title: title,\n        content: \"\",\n        created_on: firebase.firestore.FieldValue.serverTimestamp(),\n        last_modified: firebase.firestore.FieldValue.serverTimestamp(),\n      });\n\n      // Update this setId's doc in the 'set-notes' collection\n      const ref_setNotesDoc = db\n        .collection(ROOT_COLLECTION.SET_NOTES)\n        .doc(setId);\n\n      await t.set(\n        ref_setNotesDoc,\n        {\n          notes: {\n            [ref_newNote.id]: { title: title },\n          },\n          notes_count: firebase.firestore.FieldValue.increment(1),\n        },\n        { merge: true }\n      );\n    });\n  } catch (error) {\n    throw new Error(\"Transaction failed for addNote: \", error.message);\n  }\n  return true;\n};\n\n/**\n * Removes note related documents or fields of documents in the following collections: 'set-notes' and 'notes'\n * @param  {String} noteId The noteId which is the primary key in 'notes' and referenced in 'set-notes'\n * @param  {String} setId The setId of the set which this note belongs\n * @return {Boolean}      A boolean representing the result of the atomic transaction (all completed or all failed)\n */\nexport const removeNote = async (noteId, setId) => {\n  if (noteId == null) {\n    throw new Error(\"Missing noteId, cannot remove Note\");\n  } else if (setId == null) {\n    throw new Error(\"Missing setId, cannot remove Note\");\n  }\n\n  //ensure atomicity\n  try {\n    await db.runTransaction(async (t) => {\n      // Remove the document from 'notes' collection\n      const ref_note = db.collection(ROOT_COLLECTION.NOTES).doc(noteId);\n\n      await t.delete(ref_note);\n\n      // Remove the key-value entry in 'set-notes' which is embedded in the notes object\n      // Also, update the notes_count field by -1\n      const ref_setNotesDoc = db\n        .collection(ROOT_COLLECTION.SET_NOTES)\n        .doc(setId);\n\n      // we use this special dot notation to access a particular nested field\n      await t.update(ref_setNotesDoc, {\n        notes_count: firebase.firestore.FieldValue.increment(-1),\n        [`notes.${noteId}`]: firebase.firestore.FieldValue.delete(),\n      });\n    });\n  } catch (error) {\n    throw new Error(\"Transaction failed for removeNote: \", error.message);\n  }\n  return true;\n};\n\nexport const saveNote = async (noteId, setId, noteData) => {\n  if (noteId == null) {\n    throw new Error(\"Missing noteId, cannot update Note\");\n  } else if (setId == null) {\n    throw new Error(\"Missing setId, cannot update Note\");\n  } else if (noteData == null) {\n    throw new Error(\"Missing noteData, cannot update Note\");\n  }\n\n  // Very hacky way to figure out what to update the note document with\n  const { title, content } = noteData;\n\n  let writeableNoteData = {};\n  if (title && content) {\n    writeableNoteData = { title: title, content: content };\n  } else if (!title && content) {\n    writeableNoteData = { content: content };\n  } else if (title && !content) {\n    writeableNoteData = { title: title };\n  }\n\n  let last_saved;\n  //ensure atomicity  NOT SURE WE NEED TRANSACTION HERE??\n  try {\n    await db.runTransaction(async (t) => {\n      const ref_notesDoc = db.collection(ROOT_COLLECTION.NOTES).doc(noteId);\n\n      /* create the timestamp here rather than have the server do it so we can save\n      the value and pass it as the return value*/\n      last_saved = firebase.firestore.Timestamp.now();\n\n      await t.update(ref_notesDoc, {\n        ...writeableNoteData,\n        last_modified: last_saved,\n      });\n    });\n  } catch (error) {\n    throw new Error(\"Transaction failed for saveNote: \", error.message);\n  }\n  return last_saved;\n};\n\n/**\n * Adds a card to the set by updating the set's document in the 'set-cards' collection\n * @param  {String} userId The userId to associate (as owner) with this card and set\n * @param  {String} setId The setId that this card belongs to\n * @param  {Object} data Object holding the card data. Requires non-empty fields for 'side_one' and 'side_two'\n * @return {Promise}      A Promise resolved once the data has been successfully written to the backend\n */\nexport const addCard = async (userId, setId, cardData) => {\n  const { side_one, side_two } = cardData;\n\n  if (userId == null) {\n    throw new Error(\"No userId!\");\n  } else if (setId == null) {\n    throw new Error(\"No setId!\");\n  } else if (\n    cardData == null ||\n    side_one.trim() === \"\" ||\n    side_two.trim() === \"\"\n  ) {\n    throw new Error(\"Insufficient data to create new Card\");\n  }\n\n  // Generate a new cardId for this card\n  const cardId = firestoreAutoId();\n\n  // Update this setId's doc in the 'set-card' collection\n  const ref_setCardsDoc = db.collection(ROOT_COLLECTION.SET_CARDS).doc(setId);\n\n  return await ref_setCardsDoc.update({\n    [`cards.${cardId}`]: {\n      side_one: side_one,\n      side_two: side_two,\n      created_on: firebase.firestore.FieldValue.serverTimestamp(),\n      last_modified: firebase.firestore.FieldValue.serverTimestamp(),\n    },\n    cards_count: firebase.firestore.FieldValue.increment(1),\n    last_modified: firebase.firestore.FieldValue.serverTimestamp(),\n  });\n};\n\n/**\n * Removes card with given cardId from the set's document in the 'set-cards' collection\n * @param  {String} cardId The cardId that references this card in document\n * @param  {String} setId The setId of the set which this card belongs\n * @return\n */\nexport const removeCard = async (cardId, setId) => {\n  if (cardId == null) {\n    throw new Error(\"Missing cardId, cannot remove Card\");\n  } else if (setId == null) {\n    throw new Error(\"Missing setId, cannot remove Card\");\n  }\n\n  const ref_setCardsDoc = db.collection(ROOT_COLLECTION.SET_CARDS).doc(setId);\n\n  const res = await ref_setCardsDoc.update({\n    [`cards.${cardId}`]: firebase.firestore.FieldValue.delete(),\n    cards_count: firebase.firestore.FieldValue.increment(-1),\n  });\n\n  return res;\n};\n\n/* - - - HELPERS - - - */\n\nexport const firestoreAutoId = () => {\n  const CHARS =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n  let autoId = \"\";\n\n  for (let i = 0; i < 20; i++) {\n    autoId += CHARS.charAt(Math.floor(Math.random() * CHARS.length));\n  }\n  return autoId;\n};\n","import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  useCallback,\n  useRef,\n} from \"react\";\nimport {\n  currentUser,\n  onSnapshotUserById,\n  doSignOut,\n  onAuthStateChanged,\n} from \"../components/Firebase\";\n\nexport const USER_SESSION_STATUS = Object.freeze({\n  ANON: \"ANON\",\n  USER_LOADING: \"USER_LOADING\",\n  USER_READY: \"USER_READY\",\n});\n\n/* \nSee https://benmcmahen.com/using-firebase-with-react-hooks/\n*/\n\n/* This context holds the data for the user session (Firebase authentication)\nand the specific user data from the Firestore database collection \"/users'\" \n\nSo if session data or user data is needed anywhere in the app, this context can\nbe consumed */\n/* const userContext = createContext({\n  status: null,\n  userSession: null,\n  userInDB: null,\n});\n */\n\nconst userSessionContext = createContext({\n  initiliazing: null,\n  userSession: null,\n});\nconst userDbContext = createContext({\n  loadingUser: null,\n  userDb: null,\n});\nconst userSessionStatusContext = createContext(USER_SESSION_STATUS.ANON);\n\nexport const UserSessionContext = ({\n  userSessionValue,\n  userDbValue,\n  userSessionStatusValue,\n  children,\n}) => {\n  return (\n    <userSessionContext.Provider value={userSessionValue}>\n      <userDbContext.Provider value={userDbValue}>\n        <userSessionStatusContext.Provider value={userSessionStatusValue}>\n          {children}\n        </userSessionStatusContext.Provider>\n      </userDbContext.Provider>\n    </userSessionContext.Provider>\n  );\n};\n\n/* --- The following are 2 hooks used to get specific info from the userContext --- */\n\nexport const useUserSession = () => {\n  const { initializing, userSession } = useContext(userSessionContext);\n  return { initializing, userSession };\n};\n\nexport const useUserDb = () => {\n  const { loadingUser, userDb } = useContext(userDbContext);\n  return { loadingUser, userDb };\n};\n\nexport const useUserSessionStatus = () => {\n  const userSessionStatus = useContext(userSessionStatusContext);\n  return userSessionStatus;\n};\n\n/* This hook will update its state each time its listener receives an\nonAuthStateChanged event from Firebase authentication, i.e. user logged in/out, etc.\nIts state is what's used to provide the up to date information for the userContext */\nexport const useOnAuthStateChanged = () => {\n  const [sessionState, setSessionState] = useState(currentUser);\n  const [userState, setUserState] = useState(null);\n\n  const [initializing, setInitializing] = useState(!sessionState);\n  const [loadingUser, setLoadingUser] = useState(null);\n\n  console.debug(\n    `useSession.js: useAuth, initializing = ${initializing}, loadingUser = ${loadingUser}`\n  );\n\n  /* Listener for our onSnapshot query.\n  Must store it in a ref so that it can be unsubcribed on unmount\n  Default: empty function */\n  const userObserverRef = useRef(null);\n\n  const onChange = useCallback((user) => {\n    if (user) {\n      setSessionState(user);\n      setInitializing(false);\n      console.log(\n        `useSession.js: onChange, USER SESSION EXISTS (${user.uid} LOGGED IN) initializing = false`\n      );\n      try {\n        setLoadingUser(true);\n        console.debug(\n          \"useSession.js: onChange, Attempting to load User. loadingUser = true\"\n        );\n        userObserverRef.current = onSnapshotUserById(user.uid, (snapshot) => {\n          if (snapshot.empty) {\n            throw new Error(\n              \"useSession.js: onChange, couldn't find authenticated user in the 'users' firestore db\"\n            );\n          }\n          setUserState(snapshot.data());\n          setLoadingUser(false);\n          console.debug(\n            \"useSession.js: getUser has completed, loadingUser = false\"\n          );\n          console.log(snapshot.data());\n        });\n      } catch (e) {\n        console.error(e.message);\n\n        // NEED TO LOG THE USER OUT BECAUSE WE CANT CONTINUE WITH THESE ERRORS\n        doSignOut();\n      }\n    } else {\n      setInitializing(false);\n      setSessionState(null);\n      console.log(\n        \"useSession.js: onChange, NO USER SESSION (LOGGED OUT). initializing = false\"\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    // listen for auth state changes\n    const unsubscribe = onAuthStateChanged(onChange);\n\n    console.debug(\n      \"useSession.js: useEffect -- subscribed to onAuthStateChanged\"\n    );\n    //unsubscribe to the listener when unmounting\n    return () => {\n      unsubscribe();\n    };\n  }, [onChange]);\n\n  useEffect(() => {\n    //unsubscribe to the listener when unmounting\n    return () => {\n      if (userObserverRef.current !== null) {\n        return userObserverRef.current();\n      } else {\n        return null;\n      }\n    };\n  }, []);\n\n  const getUserSessionStatus = () => {\n    if (!initializing) {\n      if (!sessionState) {\n        return USER_SESSION_STATUS.ANON;\n      }\n\n      if (!userState) {\n        return USER_SESSION_STATUS.USER_LOADING;\n      } else {\n        return USER_SESSION_STATUS.USER_READY;\n      }\n    } else {\n      return USER_SESSION_STATUS.ANON;\n    }\n  };\n\n  return {\n    initializing: initializing,\n    userSession: sessionState,\n    loadingUser: loadingUser,\n    userDb: userState,\n    userSessionStatus: getUserSessionStatus(),\n  };\n};\n\nexport default useUserSession;\n","import React, { createContext, useContext, useReducer, useEffect } from \"react\";\n\nimport Cookies from \"universal-cookie\";\n\nimport { useUserDb } from \"./useSession\";\n\nexport const ACTION_TYPE = Object.freeze({\n  UPDATE_ACTIVE_SET: 0,\n  CLEAR_ACTIVE_SET: 1,\n});\n\nconst cookies = new Cookies(); // universal-cookie module\n\n/* Previously we were storing the activeSet in cookies and pulling it back out to set the initial state\nAs of now, not storing activeSet in cookies--didn't feel this added anything?? \nSo, not using cookies for anything at the moment, but kept in the code for now... */\nconst initialState = {\n  cookies: cookies,\n  activeSet: {\n    setId: null,\n    title: null,\n  },\n};\n\nconst userClientContext = createContext(initialState);\n\nexport const useUserClient = () => {\n  return useContext(userClientContext);\n};\n\nconst UserClientContext = ({ children }) => {\n  const [state, dispatch] = useReducer(Reducer, initialState);\n\n  return (\n    <userClientContext.Provider value={[state, dispatch]}>\n      {children}\n    </userClientContext.Provider>\n  );\n};\n\n/* The reducer is able to take previous state and apply actions, returning an updated state */\nconst Reducer = (state, action) => {\n  switch (action.type) {\n    /* To update the user's active set, we do 2 things. We store the info in cookies so it can persist between browser sessions/refrehses\n    and we store the same info in the top level of state (i.e. in the activeSet map) so that it can be quickly referenced in components needing it */\n    case ACTION_TYPE.UPDATE_ACTIVE_SET:\n      return {\n        ...state,\n        activeSet: {\n          setId: action.payload.setId,\n          title: action.payload.title,\n        },\n      };\n    case ACTION_TYPE.CLEAR_ACTIVE_SET:\n      return {\n        ...state,\n        activeSet: {\n          setId: null,\n          title: null,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport default UserClientContext;\n","import React, { useState } from \"react\";\nimport { Link, useLocation, useHistory } from \"react-router-dom\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FreeBreakfast from \"@material-ui/icons/FreeBreakfast\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Container from \"@material-ui/core/Container\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DoubleArrowIcon from \"@material-ui/icons/DoubleArrow\";\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nimport { doSignOut } from \"../Firebase\";\n\nimport * as ROUTES from \"../../constants/routes\";\n\nimport { useUserSession, useUserDb } from \"../../hooks/useSession\";\nimport { useUserClient } from \"../../hooks/useUserClient\";\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n  },\n  appBarRoot: {\n    background: \"transparent\",\n    borderBottom: \"2px solid black\",\n    boxShadow: \"none\",\n  },\n  logo: {\n    minWidth: \"0\",\n  },\n  rightContent: {\n    display: \"flex\",\n    marginLeft: \"auto\",\n  },\n  doubleArrow: {\n    fontSize: \"small\",\n    color: \"#ff5722\",\n  },\n  usernameText: {\n    color: \"black\",\n    alignSelf: \"center\",\n  },\n});\n\nconst Navigation = () => {\n  const classes = useStyles();\n\n  /* Get the user session data (i.e. from Firebase authentication)*/\n  const { userSession } = useUserSession();\n  /* Get the user database data (i.e. from Firestore collection 'users')*/\n  const { userDb: user } = useUserDb();\n\n  /* Get the user data that isn't database stored, i.e. specific to the local app \n  Note that this hook uses a reducer so that it can be updated through certain actions */\n  const [userClient, dispatchUserClient] = useUserClient();\n\n  const location = useLocation();\n  const history = useHistory();\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleCloseMenu = (event) => {\n    setAnchorEl(null);\n  };\n\n  const onSignOutClick = (event) => {\n    doSignOut();\n    handleCloseMenu(event);\n    history.push(ROUTES.SIGNOUT_PAGE);\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar className={classes.appBarRoot} position=\"static\" elevation={1}>\n        <Container>\n          <Toolbar>\n            <Link to={ROUTES.HOME}>\n              <Button className={classes.logo}>\n                <FreeBreakfast fontSize=\"large\"></FreeBreakfast>\n              </Button>\n            </Link>\n            <Divider orientation=\"vertical\" variant=\"middle\" flexItem />\n            <Link to={ROUTES.SETS_PAGE}>\n              <Button>SETS</Button>\n            </Link>\n\n            {!userSession ||\n            userClient.activeSet.setId == null ||\n            userClient.activeSet.title == null ? null : (\n              <>\n                <DoubleArrowIcon className={classes.doubleArrow} />\n                <Link to={`${ROUTES.SET_PAGE}/${userClient.activeSet.setId}`}>\n                  <Button>{userClient.activeSet.title}</Button>\n                </Link>\n              </>\n            )}\n\n            <Divider orientation=\"vertical\" variant=\"middle\" flexItem />\n            {userSession ? (\n              <div className={classes.rightContent}>\n                <IconButton onClick={handleMenu} label=\"test\">\n                  <AccountCircle />\n                </IconButton>\n                {user && (\n                  <Typography variant=\"body1\" className={classes.usernameText}>\n                    {user.username}\n                  </Typography>\n                )}\n\n                <Menu\n                  anchorEl={anchorEl}\n                  anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n                  keepMounted\n                  transformOrigin={{\n                    vertical: \"top\",\n                    horizontal: \"right\",\n                  }}\n                  open={open}\n                  onClose={handleCloseMenu}\n                >\n                  <MenuItem onClick={handleCloseMenu}>Profile</MenuItem>\n                  <Divider orientation=\"horizontal\" />\n                  <MenuItem onClick={onSignOutClick}>Sign Out</MenuItem>\n                </Menu>\n              </div>\n            ) : (\n              location.pathname !== ROUTES.SIGNIN_PAGE && (\n                <div className={classes.rightContent}>\n                  <Link to={ROUTES.SIGNIN_PAGE}>\n                    <Button>Log in</Button>\n                  </Link>\n                </div>\n              )\n            )}\n          </Toolbar>\n        </Container>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default Navigation;\n","export const HOME = \"/\";\nexport const NOTE_PAGE = \"/note\";\nexport const SETS_PAGE = \"/sets\";\nexport const SET_PAGE = \"/set\";\nexport const SIGNIN_PAGE = \"/signin\";\nexport const SIGNOUT_PAGE = \"/goodbye\";\n","import React from \"react\";\n\nimport clsx from \"clsx\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Box from \"@material-ui/core/Box\";\nimport Fade from \"@material-ui/core/Fade\";\n\nconst useStyles = makeStyles({\n  root: {\n    position: \"fixed\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n  relative: {\n    position: \"relative\",\n    transform: \"translate(45%, 50%)\",\n    height: \"50%\",\n  },\n  smallGrey: {\n    color: \"grey\",\n  },\n});\n\nconst Loading = ({ type, relative = false, delay = true }) => {\n  const classes = useStyles();\n\n  const rootClasses = clsx(\n    {\n      [classes.relative]: relative,\n    },\n    { [classes.root]: !relative }\n  );\n\n  const progressClasses = clsx({\n    [classes.smallGrey]: type === \"smallGrey\",\n  });\n\n  const size = type === \"smallGrey\" ? 40 : 50;\n\n  return (\n    <Fade\n      in\n      unmountOnExit\n      style={{\n        transitionDelay: delay ? \"300ms\" : \"0ms\",\n      }}\n    >\n      <Box className={rootClasses}>\n        <CircularProgress\n          color=\"primary\"\n          size={size}\n          className={progressClasses}\n          disableShrink\n          thickness={4}\n        />\n      </Box>\n    </Fade>\n  );\n};\n\nexport default Loading;\n","import React from \"react\";\n\nimport Container from \"@material-ui/core/Container\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport * as ROUTES from \"../../constants/routes\";\n\nconst useStyles = makeStyles({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    paddingTop: \"30px\",\n  },\n});\n\nconst HomePage = () => {\n  const classes = useStyles();\n\n  // This is just hard coded link for development\n  const noteLink = `${ROUTES.NOTE_PAGE}/cbNW3nAieisZyUuXF8pN`;\n\n  return (\n    <Container className={classes.root}>\n      <Typography variant=\"h4\">Welcome</Typography>\n    </Container>\n  );\n};\n\nexport default HomePage;\n","import React, { createContext, useContext, useReducer } from \"react\";\n\nimport { addCard, saveNote } from \"../components/Firebase\";\n\n/*\n * This is a 'custom hook' but is largely just a custom Context. The NoteAndCardsContextProvider\n * is implemented in the ViewNote>index.js page and sits atop the component tree that includes\n * Toolbar, Workspace, and MarkdownEditor. The intent is to provide common props to all these\n * components without having to pass everything down via prop drilling.\n *\n * The NoteAndCardsContextProvider function is a wrapper for the Context.Provider, but more importantly\n * helps to manage the state of the context's data by way of a useReducer pattern. In this way,\n * when the context is consumed in a child component via useNoteAndCards() hook (which itself calls\n * useContext), that component gets returned the state and a dispatch function which can be\n * used to update state from a child component.\n *\n */\n\n/* An enum that formalizes the different action types that can be called with dispatch*/\nexport const NOTE_AND_CARDS_ACTION = Object.freeze({\n  CARD_ADDED: \"cardAdded\",\n  UPDATE_NOTE_ON_CLIENT: \"updateNoteOnClient\",\n  NOTE_SAVED: \"noteSaved\",\n});\n\n/* These are the data types that the context will carry, initialized to null to start*/\n/* Idk if this is kosher, but I even stored a callback function here so that when a certain\ndispatch action is performed, the NoteAndCardsContextProvider has access to a certain component\nvia this callback*/\nconst initialNullState = {\n  setId: null,\n  userId: null,\n  noteId: null,\n  noteOnClient: \"\",\n  noteIsSynced: true,\n  lastSaved: null,\n  noteSavedCallback: (f) => f,\n  cardAddedCallback: (f) => f,\n};\n\n// create the context\nconst NoteAndCardsContext = createContext(initialNullState);\n\n// this is the 'custom hook', but this hook really only gives us the context\nexport const useNoteAndCards = () => {\n  return useContext(NoteAndCardsContext);\n};\n\n// this is the meat and potatoes of this module\nexport const NoteAndCardsContextProvider = ({\n  children,\n  initialState = { ...initialNullState },\n}) => {\n  const [state, dispatch] = useReducer(Reducer, initialState);\n\n  return (\n    <NoteAndCardsContext.Provider value={[state, dispatch]}>\n      {children}\n    </NoteAndCardsContext.Provider>\n  );\n};\n\n// the reducer function implements the action types\nconst Reducer = (state, action) => {\n  switch (action.type) {\n    case NOTE_AND_CARDS_ACTION.CARD_ADDED:\n      state.cardAddedCallback();\n      return state;\n    case NOTE_AND_CARDS_ACTION.UPDATE_NOTE_ON_CLIENT:\n      return {\n        ...state,\n        noteOnClient: action.payload,\n        noteIsSynced: false,\n      };\n\n    case NOTE_AND_CARDS_ACTION.NOTE_SAVED:\n      state.noteSavedCallback();\n      return {\n        ...state,\n        noteIsSynced: true,\n        lastSaved: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\n/* Usually want to memoize any function that is returned from a hook so that it doesn't have to be memoized where it's called*/\n/*  const addCardToSetCards = useCallback(\n    (side_one, side_two, callback) => {\n      addCard(userId, setId, { side_one: side_one, side_two: side_two })\n        .then(() => {\n          if (callback && typeof callback === \"function\") {\n            callback(true);\n          }\n        })\n        .catch((e) => {\n          console.error(`useSetCards.js: Failed to addCard: ${e.message}`);\n          callback(false);\n        });\n    },\n    [userId, setId]\n  ); */\n","import React from \"react\";\nimport { Typography, Container } from \"@material-ui/core\";\n\nconst InfoWorkspace = (props) => {\n  return (\n    <Container>\n      <Typography variant=\"body1\">\n        This is an information box on how to use the tools\n      </Typography>\n    </Container>\n  );\n};\n\nexport default InfoWorkspace;\n","import Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n\nconst useStyles = makeStyles({\n  root: {\n    border: 0,\n    borderRadius: 3,\n    boxShadow: \"0 1px 2px 1px rgba(2, 2, 2, 0.1)\",\n    color: \"white\",\n    background: \"#ff5722\",\n    height: 48,\n    padding: \"0 20px\",\n    \"&:hover\": {\n      background: \"#ffaa90\",\n    },\n  },\n  disabled: {\n    background: \"#fbfbfb\",\n    color: \"rgb(185, 177, 177)\",\n  },\n});\n\nexport default function SaveButton(props) {\n  const classes = useStyles();\n  return (\n    <Button\n      className={classes.root}\n      startIcon={<SaveIcon />}\n      disabled={!props.isEnabled}\n      onClick={props.onClick}\n      classes={{\n        disabled: classes.disabled,\n      }}\n    >\n      Save\n    </Button>\n  );\n}\n","import Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport Repeat from \"@material-ui/icons/Repeat\";\n\nconst useStyles = makeStyles({\n  root: {\n    /*     background:\n        \"linear-gradient(45deg, rgba(71,145,219,1) 0%, rgba(25,118,210,1) 100%)\", */\n    border: 0,\n    borderRadius: 3,\n    boxShadow: \"0 1px 2px 1px rgba(2, 2, 2, 0.1)\",\n    color: \"#03a9f4\",\n    background: \"white\",\n    height: 48,\n    padding: \"0 20px\",\n  },\n  disabled: {\n    background: \"#fbfbfb\",\n    color: \"rgb(185, 177, 177)\",\n  },\n});\n\nexport default function FlipButton(props) {\n  const classes = useStyles();\n  return (\n    <Button\n      className={classes.root}\n      startIcon={<Repeat />}\n      disabled={!props.isEnabled}\n      onClick={props.onClick}\n      classes={{\n        disabled: classes.disabled,\n      }}\n    >\n      Flip\n    </Button>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport FormControl from \"@material-ui/core/FormControl\";\n\nconst useStyles = makeStyles({\n  definitionInput: {},\n  termInput: {},\n  isActive: {\n    background: \"rgba(225, 245, 254, 0.3)\",\n    transition: \"background-color 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms\",\n  },\n  outlinedInput: {\n    padding: \"10px 3px 10px 3px\",\n    borderRadius: \"2px\",\n\n    \"&$focused $notchedOutlineActive\": {\n      border: \"1px solid rgba(15, 15, 15, 0.6)\",\n      borderBottom: \"2px solid rgba(137, 137, 137, 0.7)\",\n    },\n  },\n  notchedOutlineActive: {\n    borderBottom: \"2px solid rgba(137, 137, 137, 0.7)\",\n    boxShadow: \"0 3px 5px 2px rgba(2, 2, 2, 0.1)\",\n  },\n  notchedOutlineInactive: {\n    border: \"1px solid rgba(15, 15, 15, 0.6)\",\n    boxShadow: \"0 3px 5px 2px rgba(2, 2, 2, 0.1)\",\n  },\n  formLabelRoot: {\n    \"&$focused\": {\n      color: \"#1C1C1C\",\n      fontWeight: \"bold\",\n    },\n  },\n  focused: {},\n  inputAdornmentRoot: {\n    transform: \"translate(-18px, -65px)\",\n  },\n});\n\nexport default function DefinitionInput({\n  onClearInput = (f) => f,\n  onFocus = (f) => f,\n  onChange = (f) => f,\n  inputIsEmpty = true,\n  ...props\n}) {\n  const classes = useStyles();\n  const isTerm = props.name === \"term\";\n  const { isactive, value, name, label } = props;\n  const className = clsx(\n    { [classes.definitionInput]: !isTerm, [classes.termInput]: isTerm },\n    {\n      [classes.isActive]: isactive,\n    }\n  );\n\n  return (\n    <FormControl fullWidth={true}>\n      <TextField\n        name={name}\n        label={label}\n        className={className}\n        multiline\n        rows={6}\n        rowsMax={6}\n        variant=\"outlined\"\n        inputProps={{\n          style: {\n            textAlign: \"center\",\n            padding: \"20px 10px 10px 10px\",\n            marginRight: \"-45px\",\n          },\n        }}\n        InputLabelProps={{\n          shrink: true,\n          classes: {\n            root: classes.formLabelRoot,\n            focused: classes.focused,\n          },\n        }}\n        fullWidth={true}\n        InputProps={{\n          classes: {\n            root: classes.outlinedInput,\n            notchedOutline: isactive\n              ? classes.notchedOutlineActive\n              : classes.notchedOutlineInactive,\n            focused: classes.focused,\n          },\n          endAdornment: (\n            <InputAdornment\n              position=\"end\"\n              className={classes.inputAdornmentRoot}\n            >\n              <IconButton\n                aria-label=\"clear contents\"\n                onClick={onClearInput}\n                onMouseDown={(e) => e.preventDefault()}\n                edge=\"end\"\n              >\n                {!inputIsEmpty ? <Clear /> : null}\n              </IconButton>\n            </InputAdornment>\n          ),\n        }}\n        onFocus={onFocus}\n        onChange={onChange}\n        value={value}\n        overflow=\"hidden\"\n      />\n    </FormControl>\n  );\n}\n","import React, { useState, useEffect, useRef } from \"react\";\n\nimport { useHotkeys } from \"react-hotkeys-hook\";\n\nimport SaveButton from \"./SaveButton\";\nimport FlipButton from \"./FlipButton\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\n\nimport DefinitionInput from \"./DefinitionInput\";\n\nconst DefinitionWorkspace = ({\n  currentTextSelected,\n  onWorkspaceSaveCard = (f) => f,\n}) => {\n  const [termValue, setTermValue] = useState(\"\");\n  const [definitionValue, setDefinitionValue] = useState(\"\");\n  const [activeInput, setActiveInput] = useState(null);\n  const [readyToSave, setReadyToSave] = useState(false);\n  const prevTextSelected = useRef(currentTextSelected);\n\n  useEffect(() => {\n    // Only act if we have an active input\n    if (activeInput === null) {\n      return;\n    }\n\n    // Only act if the new selection is different and NOT just whitespace\n    if (\n      currentTextSelected !== null &&\n      currentTextSelected.trim() !== \"\" &&\n      currentTextSelected !== prevTextSelected\n    ) {\n      switch (activeInput) {\n        case \"term\":\n          setTermValue(currentTextSelected);\n          break;\n        case \"definition\":\n          setDefinitionValue(currentTextSelected);\n          break;\n      }\n    }\n  }, [currentTextSelected]);\n\n  const handleHotkeyFor = (inputBox, shouldAddend) => {\n    if (activeInput !== null || currentTextSelected == null) {\n      return;\n    }\n\n    const handleAddend = (value) => {\n      if (value.trim() === \"\") {\n        return currentTextSelected;\n      } else {\n        return value + \"\\n\" + currentTextSelected;\n      }\n    };\n\n    if (inputBox === \"term\") {\n      if (shouldAddend) {\n        setTermValue((value) => handleAddend(value));\n      } else {\n        setTermValue(currentTextSelected);\n      }\n    } else if (inputBox === \"definition\") {\n      if (shouldAddend) {\n        setDefinitionValue((value) => handleAddend(value));\n      } else {\n        setDefinitionValue(currentTextSelected);\n      }\n    }\n  };\n\n  /* ------ HOT KEYS ---- */\n  useHotkeys(\"q\", () => handleHotkeyFor(\"term\", true), [currentTextSelected]);\n\n  useHotkeys(\"w\", () => handleHotkeyFor(\"definition\", true), [\n    currentTextSelected,\n  ]);\n\n  /* -------------------------- */\n\n  useEffect(() => {\n    if (termValue == null || definitionValue == null) {\n      return;\n    }\n    const anInputIsEmpty =\n      termValue.trim() === \"\" || definitionValue.trim() === \"\";\n\n    setReadyToSave(!anInputIsEmpty);\n  }, [termValue, definitionValue]);\n\n  const onInputClickAway = () => {\n    if (currentTextSelected === null || currentTextSelected === \"\") {\n      setActiveInput(null);\n    }\n  };\n\n  const onFocusInput = (e) => {\n    setActiveInput(e.target.name);\n  };\n\n  const onChangeInput = (e) => {\n    const input = e.target.name;\n    if (input === \"term\") {\n      setTermValue(e.target.value);\n    } else if (input === \"definition\") {\n      setDefinitionValue(e.target.value);\n    }\n  };\n\n  const onClearTermInput = () => {\n    setTermValue(\"\");\n  };\n\n  const onClearDefinitionInput = () => {\n    setDefinitionValue(\"\");\n  };\n\n  const onSave = () => {\n    /*\n     * In the 1st paramater we send the card data (side one and side two)\n     * In the 2nd paramater we send a callback which will receive a result (boolean) if the\n     * addCard was successful or not\n     */\n    onWorkspaceSaveCard(\n      { side_one: termValue, side_two: definitionValue },\n      (result) => {\n        if (result) {\n          setTermValue(\"\");\n          setDefinitionValue(\"\");\n        }\n      }\n    );\n  };\n\n  const onFlip = () => {\n    const term = termValue;\n    const def = definitionValue;\n    setTermValue(def);\n    setDefinitionValue(term);\n  };\n\n  return (\n    <Grid container spacing={2} justify=\"space-evenly\">\n      <ClickAwayListener onClickAway={onInputClickAway}>\n        <Grid container item spacing={2}>\n          <Grid item xs={12}>\n            <DefinitionInput\n              isactive={activeInput === \"term\"}\n              name=\"term\"\n              label=\"Term\"\n              onFocus={(e) => onFocusInput(e)}\n              onChange={(e) => onChangeInput(e)}\n              value={termValue}\n              onClearInput={onClearTermInput}\n              inputIsEmpty={termValue === \"\"}\n            />\n          </Grid>\n          <Grid item xs>\n            <DefinitionInput\n              isactive={activeInput === \"definition\"}\n              name=\"definition\"\n              label=\"Definition\"\n              onFocus={(e) => onFocusInput(e)}\n              onChange={(e) => onChangeInput(e)}\n              value={definitionValue}\n              onClearInput={onClearDefinitionInput}\n              inputIsEmpty={definitionValue === \"\"}\n            />\n          </Grid>\n        </Grid>\n      </ClickAwayListener>\n      <Grid item container xs={12} justify=\"center\" spacing={2}>\n        <Grid item>\n          <SaveButton isEnabled={readyToSave} onClick={onSave} />\n        </Grid>\n        <Grid item>\n          <FlipButton\n            isEnabled={termValue.trim() !== \"\" || definitionValue.trim() !== \"\"}\n            onClick={onFlip}\n          />\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default DefinitionWorkspace;\n","import React, { useState } from \"react\";\n\nimport Box from \"@material-ui/core/Box\";\n\nimport InfoWorkspace from \"./InfoWorkspace\";\nimport DefinitionWorkspace from \"./DefinitionWorkspace\";\nimport Loading from \"../../Loading\";\nimport {\n  useNoteAndCards,\n  NOTE_AND_CARDS_ACTION,\n} from \"../../../hooks/useNoteAndCards\";\nimport { addCard } from \"../../Firebase\";\n\nexport const WORKSPACES = Object.freeze({\n  INFO_WORKSPACE: \"infoWorkspace\",\n  DEFINITION_WORKSPACE: \"definitionWorkspace\",\n  FILLBLANK_WORKSPACE: \"fillBlankWorkspace\",\n});\n\n/*\n  This Workspace component houses the individual workspaces and implements functionality that should be common\n  to all workspaces, e.g. Save Card.\n*/\nconst Workspace = ({\n  currentTextSelected,\n  currentWorkspace = WORKSPACES.INFO_WORKSPACE,\n}) => {\n  const [noteAndCardsState, dispatchNoteAndCards] = useNoteAndCards();\n  const [isLoading, setIsLoading] = useState(false);\n\n  /* When each workspace has its 'save' button clicked, it will be handled here \n  The 'specificWorkspaceCallback' parameter is provided by the child workspace component\n  who initiated the save card action and should be a callback function so that this \n  child component can be notified when save action is completed\n  */\n  const onWorkspaceSaveCard = (cardData, specificWorkspaceCallback) => {\n    setIsLoading(true);\n\n    /* the cardData parameter should be an object that matches the form that\n    the firebase function addCard expects*/\n    addCard(noteAndCardsState.userId, noteAndCardsState.setId, cardData)\n      .then((res) => {\n        // let's the context know a card was added, i.e. it can fire a callback to another component\n        dispatchNoteAndCards({\n          type: NOTE_AND_CARDS_ACTION.CARD_ADDED,\n        });\n\n        if (typeof specificWorkspaceCallback === \"function\") {\n          // this is the callback provided by the specific workspace so it can know that the addCard is complete\n          specificWorkspaceCallback(res);\n        }\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.error(`Workspace.js: Failed to add new Card: ${error.message}`);\n        setIsLoading(false);\n      });\n  };\n\n  const renderWorkspace = (workspace) => {\n    switch (workspace) {\n      case WORKSPACES.DEFINITION_WORKSPACE:\n        return (\n          <DefinitionWorkspace\n            currentTextSelected={currentTextSelected}\n            onWorkspaceSaveCard={onWorkspaceSaveCard}\n          ></DefinitionWorkspace>\n        );\n      case WORKSPACES.INFO_WORKSPACE:\n        return <InfoWorkspace />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Box id=\"workspace\">\n      {isLoading ? (\n        <Loading type=\"smallGrey\" relative={true} delay={false} />\n      ) : (\n        renderWorkspace(currentWorkspace)\n      )}\n    </Box>\n  );\n};\n\nexport default Workspace;\n","import React, { useState, useEffect } from \"react\";\n\nimport clsx from \"clsx\";\n\nimport Button from \"@material-ui/core/Button\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport InfoOutlined from \"@material-ui/icons/InfoOutlined\";\n\nimport Workspace, { WORKSPACES } from \"../Workspace\";\nimport {\n  useNoteAndCards,\n  NOTE_AND_CARDS_ACTION,\n} from \"../../../hooks/useNoteAndCards\";\n\nconst useStyles = makeStyles({\n  rootToolbar: {\n    justifyContent: \"flex-start\",\n    marginBottom: \"30px\",\n    borderBottom: \"1px dashed #aaa\",\n    minHeight: \"auto\",\n    padding: \"5px 0px\",\n  },\n  buttonTool: {\n    background: \"#e6e6e6\",\n    marginRight: \"3px\",\n    padding: \"3px 6px\",\n    borderRadius: \"3px\",\n  },\n  buttonInfo: {\n    padding: \"3px 6px\",\n  },\n  buttonSelected: {\n    background: \"#ff5722\",\n    color: \"white\",\n    \"&:hover\": {\n      background: \"#ffaa90\",\n    },\n  },\n});\n\n/*\nThe ViewNoteToolbar component manages the toolbar buttons and also keeps state on which workspace (i.e. tool) is currently selected\n\nAs it stands now, the Workspace component is a child of ViewNoteToolbar\n*/\nconst ViewNoteToolbar = ({ currentTextSelected }) => {\n  const [currentWorkspace, setCurrentWorkspace] = useState(\n    WORKSPACES.DEFINITION_WORKSPACE\n  );\n  const [noteAndCardsState, dispatchNoteAndCards] = useNoteAndCards();\n\n  const onToolClicked = (e) => {\n    if (currentWorkspace === e.currentTarget.name) {\n      setCurrentWorkspace(null);\n    } else {\n      setCurrentWorkspace(e.currentTarget.name);\n    }\n    e.preventDefault();\n  };\n\n  const classes = useStyles();\n\n  return (\n    <>\n      <Toolbar className={classes.rootToolbar} disableGutters={true}>\n        <Button\n          name={WORKSPACES.DEFINITION_WORKSPACE}\n          onClick={onToolClicked}\n          className={clsx(classes.buttonTool, {\n            [classes.buttonSelected]:\n              currentWorkspace === WORKSPACES.DEFINITION_WORKSPACE,\n          })}\n        >\n          Definition\n        </Button>\n        <Button\n          className={clsx(classes.buttonTool, {\n            [classes.buttonSelected]:\n              currentWorkspace === WORKSPACES.FILLBLANK_WORKSPACE,\n          })}\n        >\n          Fill blank\n        </Button>\n        <Button\n          name={WORKSPACES.INFO_WORKSPACE}\n          onClick={onToolClicked}\n          className={clsx(classes.buttonInfo, {\n            [classes.buttonSelected]:\n              currentWorkspace === WORKSPACES.INFO_WORKSPACE,\n          })}\n        >\n          <InfoOutlined />\n        </Button>\n      </Toolbar>\n      <Workspace\n        currentTextSelected={currentTextSelected}\n        currentWorkspace={currentWorkspace}\n      ></Workspace>\n    </>\n  );\n};\n\nexport default ViewNoteToolbar;\n","import React, { useState } from \"react\";\n\nimport Drawer from \"@material-ui/core/Drawer\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst drawerWidth = 450;\n\nconst useStyles = makeStyles({\n  drawer: {\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    top: \"15vh\",\n    width: drawerWidth,\n    padding: \"0 15px 0 2px\",\n    borderLeft: \"none\",\n  },\n  toolDrawerContainer: {\n    borderTop: \"1px solid #f2f2f2\",\n  },\n});\n\nconst ToolDrawer = ({ open, children }) => {\n  const classes = useStyles();\n\n  return (\n    <Drawer\n      className={classes.drawer}\n      classes={{\n        paper: classes.drawerPaper,\n      }}\n      variant=\"persistent\"\n      anchor=\"right\"\n      open={open}\n    >\n      <div className={classes.toolDrawerContainer}>{children}</div>\n    </Drawer>\n  );\n};\n\nexport default ToolDrawer;\n","import React, { useState, useEffect } from \"react\";\n\nconst LastSaveTime = ({ date }) => {\n  const [dateTime, setDateTime] = useState({\n    date: \"\",\n    time: \"\",\n  });\n\n  useEffect(() => {\n    const [d, t] = date.toLocaleString().split(\",\");\n    const [t2, amPm] = t.trim().split(\" \");\n    const t3 = t2.substring(0, t2.length - 3);\n\n    setDateTime({ date: d, time: `${t3} ${amPm}` });\n  }, [date]);\n\n  return (\n    <span style={{ fontVariant: \"proportional-nums\", fontStyle: \"italic\" }}>\n      Last saved: {dateTime.date} at {dateTime.time}\n    </span>\n  );\n};\n\nexport default LastSaveTime;\n","import React, { useState } from \"react\";\nimport clsx from \"clsx\";\n\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\";\n\nimport \"./editorStyle.css\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport CloudDoneIcon from \"@material-ui/icons/CloudDone\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nimport { saveNote } from \"../../Firebase\";\nimport {\n  useNoteAndCards,\n  NOTE_AND_CARDS_ACTION,\n} from \"../../../hooks/useNoteAndCards\";\nimport LastSaveTime from \"./LastSaveTime\";\n\nconst useStyles = makeStyles({\n  syncStatus: {\n    display: \"flex\",\n    padding: \"4px 0\",\n  },\n  cloudIcon: {\n    color: \"#03a9f4\",\n    marginLeft: \"5px\",\n  },\n  saveIcon: {\n    color: \"#ff5722\",\n    marginLeft: \"5px\",\n    \"&:hover\": {\n      color: \"grey\",\n      cursor: \"pointer\",\n    },\n  },\n  editorPaper: {\n    borderTopLeftRadius: \"0\",\n    borderTopRightRadius: \"0\",\n  },\n  editorPaperReadOnly: {\n    borderRadius: \"4px\",\n  },\n});\n\nconst QuillEditor = ({ initialValue, readOnly = false }) => {\n  const classes = useStyles();\n  const [value, setValue] = useState(initialValue || \"\");\n  const [noteAndCardsState, dispatchNoteAndCards] = useNoteAndCards();\n\n  const toolbarOptions = [\n    [{ size: [\"small\", false, \"large\", \"huge\"] }],\n    [\"bold\", \"italic\", \"underline\", \"strike\"],\n    [\"blockquote\"],\n    [{ script: \"sub\" }, { script: \"super\" }],\n    [{ indent: \"-1\" }, { indent: \"+1\" }],\n    [{ color: [] }, { background: [] }],\n    [{ align: [] }],\n    [\"clean\"],\n  ];\n\n  const onChange = (content, delta, source, editor) => {\n    setValue(content);\n\n    console.log(delta);\n    console.log(source);\n\n    if (source === \"user\") {\n      dispatchNoteAndCards({\n        type: NOTE_AND_CARDS_ACTION.UPDATE_NOTE_ON_CLIENT,\n        payload: content,\n      });\n    }\n  };\n\n  const onSave = () => {\n    saveNote(noteAndCardsState.noteId, noteAndCardsState.setId, {\n      content: value,\n    })\n      .then((timestamp) => {\n        // should give us the lastSaved timestamp back\n        console.debug(\"QuillEditor.js: Note successfully saved.\");\n        dispatchNoteAndCards({\n          type: NOTE_AND_CARDS_ACTION.NOTE_SAVED,\n          payload: timestamp,\n        });\n      })\n      .catch((error) => {\n        console.error(`QuillEditor.js: Failed to save note: ${error.message}`);\n      });\n  };\n\n  return (\n    <>\n      {!readOnly && (\n        <div className={classes.syncStatus}>\n          <LastSaveTime date={noteAndCardsState.lastSaved.toDate()} />\n          {noteAndCardsState.noteIsSynced ? (\n            <Tooltip title=\"Note is synced\">\n              <CloudDoneIcon className={classes.cloudIcon} />\n            </Tooltip>\n          ) : (\n            <Tooltip title=\"Save note\">\n              <SaveIcon className={classes.saveIcon} onClick={onSave} />\n            </Tooltip>\n          )}\n        </div>\n      )}\n      <ReactQuill\n        theme=\"snow\"\n        value={value}\n        onChange={onChange}\n        readOnly={readOnly}\n        modules={{\n          toolbar: readOnly ? null : toolbarOptions,\n          clipboard: {\n            matchVisual: false,\n          },\n        }}\n        placeholder={value === \"\" ? \"Start you new note...\" : \"\"}\n      >\n        {/* <Paper\n          className={clsx(\n            classes.editorPaper,\n            { \"ql-readOnly\": readOnly },\n            { [classes.editorPaperReadOnly]: readOnly }\n          )}\n          elevation={1}\n        ></Paper> */}\n      </ReactQuill>\n    </>\n  );\n};\n\nexport default QuillEditor;\n","import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\nimport MarkdownIt from \"markdown-it\";\nimport clsx from \"clsx\";\n\nimport * as ROUTES from \"../../constants/routes\";\nimport { getNoteById, getSetForNoteId } from \"../Firebase\";\nimport { useUserClient, ACTION_TYPE } from \"../../hooks/useUserClient\";\nimport { NoteAndCardsContextProvider } from \"../../hooks/useNoteAndCards\";\nimport ViewNoteToolbar from \"./Toolbar\";\nimport ToolDrawer from \"./ToolDrawer\";\nimport Loading from \"../Loading\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Grid from \"@material-ui/core/Grid\";\nimport QuillEditor from \"./QuillEditor\";\n\nconst useStyles = makeStyles({\n  root: {\n    display: \"flex\",\n  },\n  noteViewContainer: {\n    flexGrow: 1,\n  },\n  noteViewContainerShifted: {\n    marginRight: \"450px\",\n  },\n  toggleBtnGridRoot: {\n    justifyContent: \"center\",\n    width: \"99%\",\n  },\n  switchBase: {\n    \"&$switchChecked\": {\n      color: \"#ff5722\",\n    },\n    \"&$switchChecked + $switchTrack\": {\n      backgroundColor: \"#ff5722\",\n    },\n  },\n  switchTrack: {},\n  switchChecked: {},\n  noteTitle: {},\n});\n\nconst ViewNotePage = () => {\n  return <NoteView />;\n};\n\nconst NoteView = () => {\n  const classes = useStyles();\n  const { id: noteId } = useParams();\n  const [noteInDb, setNoteInDb] = useState();\n  const [currentTextSelected, setCurrentTextSelected] = useState(null);\n  const [isLoading, setIsLoading] = useState(noteInDb ? false : true);\n  const history = useHistory();\n  const [userClient, userClientDispatch] = useUserClient();\n  const prevActiveSet = useRef(userClient.activeSet);\n  const [refresh, setRefresh] = useState(false);\n  const [toolDrawerOpen, setToolDrawerOpen] = useState(false);\n\n  /* Get note from Firestore db\n  - Passing the noteId in the useEffect dependency array\n  If these values change, the useEffect hook will be called again */\n  useEffect(() => {\n    if (noteId == null || noteId.trim() === \"\") {\n      console.log(\"here\");\n      // Redirect to home page\n      history.push(ROUTES.HOME);\n      return;\n    }\n\n    setIsLoading(true);\n\n    getNoteById(noteId)\n      .then((snapshot) => {\n        if (!snapshot.exists) {\n          throw new Error(`No document found in 'notes' for noteId ${noteId}`);\n        }\n\n        setNoteInDb({ ...snapshot.data(), noteId: snapshot.id });\n\n        // Now we need to reconcile what the \"active set\" for the app should be\n        // e.g. consider that the user arrived to this page via direct url and\n        // not through the SetPage\n        if (prevActiveSet.current.setId !== snapshot.data().setId) {\n          console.debug(\"ViewNote.js: using getSetForNoteId to identify set\");\n          // we must use the set-notes document to get the set info for this noteId\n          getSetForNoteId(snapshot.id)\n            .then((snapshot) => {\n              if (snapshot.empty) {\n                throw new Error(\n                  `couldn't find setId by querying 'set-notes' will noteId`\n                );\n              } else if (snapshot.size > 1) {\n                throw new Error(\n                  `located more than 1 document in 'set-notes' that claims this noteId`\n                );\n              }\n\n              const setData = snapshot.docs[0];\n\n              /* let the rest of the app know that the set that this note\n        belongs to should be \"active\", e.g. to show in Navigation bar or other places*/\n              userClientDispatch({\n                type: ACTION_TYPE.UPDATE_ACTIVE_SET,\n                payload: { setId: setData.id, title: setData.data().setTitle },\n              });\n              prevActiveSet.current = {\n                setId: setData.id,\n                title: setData.data().setTitle,\n              };\n            })\n            .catch((error) => {\n              console.error(\n                `ViewNote.js: Failed to update activeSet for userClientContext: ${error.message}`\n              );\n            });\n        }\n\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.error(\n          \"ViewNote.js: Failed to retrieve doc from 'notes': \",\n          error.message\n        );\n        setIsLoading(false);\n      });\n\n    console.log(\"ViewNote/index: useEffect getNote()\");\n  }, [noteId, refresh, history, prevActiveSet, userClientDispatch]);\n\n  /* callback for the onMouseUp event */\n  /* used to see if there is a text selection within the noteView element */\n  const onMouseUp = useCallback(() => {\n    const noteViewNode = document.getElementById(\"noteView\");\n    const selection = window.getSelection();\n\n    if (selection == null) return;\n    // anchor node is the node in which the selection begins\n    const anchorNode = selection.anchorNode;\n\n    if (anchorNode == null) return;\n    const selectionNode = anchorNode.parentNode;\n\n    // is this selected node a child of the noteview element and not somewhere else on the page\n    const selectionDidBeginInsideNoteView = noteViewNode.contains(\n      selectionNode\n    );\n\n    if (selectionDidBeginInsideNoteView) {\n      const selectionString = selection.toString();\n\n      const isNull = selectionString === \"\";\n\n      const newText = !isNull ? selectionString : null;\n\n      setCurrentTextSelected(newText);\n    } else {\n      // sending the currentTextSelected variable as 'null' will essentially tell other components\n      // when the user has clicked out but not made a new text selection\n      setCurrentTextSelected(null);\n    }\n  }, []);\n\n  /* Add listener for mouseup events to detect new selected text */\n  useEffect(() => {\n    document.addEventListener(\"mouseup\", onMouseUp);\n    // remove the listener\n    return () => document.removeEventListener(\"mouseup\", onMouseUp);\n  }, [onMouseUp]);\n\n  const onNoteSaved = () => {};\n\n  const onCardAdded = () => {};\n\n  const onToggleToolDrawer = () => {\n    setToolDrawerOpen(!toolDrawerOpen);\n  };\n\n  // CLSX helper for styling\n  const noteViewContainerClasses = clsx();\n\n  if (isLoading) {\n    return <Loading type=\"smallGrey\" />;\n  } else {\n    return (\n      <>\n        <Grid\n          className={classes.toggleBtnGridRoot}\n          container\n          alignItems=\"center\"\n          spacing={1}\n        >\n          <Grid item>\n            <Typography>Edit Note</Typography>\n          </Grid>\n          <Grid item>\n            <Switch\n              checked={toolDrawerOpen}\n              onChange={onToggleToolDrawer}\n              classes={{\n                switchBase: classes.switchBase,\n                track: classes.switchTrack,\n                checked: classes.switchChecked,\n              }}\n            />\n          </Grid>\n          <Grid item>\n            <Typography>Markup</Typography>\n          </Grid>\n        </Grid>\n        {noteInDb != null ? (\n          <div className={classes.root}>\n            <NoteAndCardsContextProvider\n              initialState={{\n                userId: noteInDb.userId,\n                setId: noteInDb.setId,\n                noteId: noteInDb.noteId,\n                noteOnClient: noteInDb.content,\n                noteIsSynced: true,\n                lastSaved: noteInDb.last_modified,\n                noteSavedCallback: onNoteSaved,\n                cardAddedCallback: onCardAdded,\n              }}\n            >\n              <Container\n                className={clsx(classes.noteViewContainer, {\n                  [classes.noteViewContainerShifted]: toolDrawerOpen,\n                })}\n              >\n                <div id=\"noteView\" className={classes.noteView}>\n                  <Typography variant=\"h5\" className={classes.noteTitle}>\n                    {noteInDb.title}\n                  </Typography>\n                  <QuillEditor\n                    initialValue={noteInDb.content}\n                    readOnly={toolDrawerOpen}\n                  />\n\n                  {/* <div dangerouslySetInnerHTML={{ __html: noteInDb.content }} /> */}\n                </div>\n              </Container>\n              <ToolDrawer open={toolDrawerOpen}>\n                <ViewNoteToolbar currentTextSelected={currentTextSelected} />\n              </ToolDrawer>\n            </NoteAndCardsContextProvider>\n          </div>\n        ) : (\n          <>Could not find this note.</>\n        )}\n      </>\n    );\n  }\n};\n\nexport default ViewNotePage;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { Container, Typography } from \"@material-ui/core\";\n\nimport { doSignInWithEmailAndPassword } from \"../Firebase\";\n\nimport * as ROUTES from \"../../constants/routes\";\n\nconst SignInPage = () => {\n  const INITIAL_STATE = {\n    email: \"\",\n    password: \"\",\n  };\n\n  const [userEntry, setUserEntry] = useState({ ...INITIAL_STATE });\n  const [error, setError] = useState(null);\n\n  const history = useHistory();\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const { email, password } = userEntry;\n\n    doSignInWithEmailAndPassword(email, password)\n      .then(() => {\n        setUserEntry({ ...INITIAL_STATE });\n        setError(null);\n        history.push(ROUTES.HOME);\n      })\n      .catch((e) => {\n        setError(e);\n      });\n  };\n\n  const onChange = (e) => {\n    e.preventDefault();\n    setUserEntry({\n      ...userEntry,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const isFormValid = () => {\n    return userEntry.email !== \"\" && userEntry.password !== \"\";\n  };\n\n  return (\n    <Container>\n      <Typography variant=\"h2\">Sign In</Typography>\n      <form onSubmit={onSubmit}>\n        <input\n          name=\"email\"\n          value={userEntry.email}\n          onChange={onChange}\n          type=\"text\"\n          placeholder=\"Email Address\"\n        />\n        <input\n          name=\"password\"\n          value={userEntry.password}\n          onChange={onChange}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        <button disabled={!isFormValid} type=\"submit\">\n          Sign In\n        </button>\n\n        {error && <p>{error.message}</p>}\n      </form>\n    </Container>\n  );\n};\n\nexport default SignInPage;\n","import React from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    paddingTop: \"30px\",\n  },\n});\n\nconst SignOutPage = () => {\n  const classes = useStyles();\n\n  return (\n    <Container className={classes.root}>\n      <Typography variant=\"h5\">\n        You have successfully been logged out.\n      </Typography>\n    </Container>\n  );\n};\n\nexport default SignOutPage;\n","import React, { useState, useEffect } from \"react\";\n\nconst EnumState = ({ currentStatus, forStatus, children }) => {\n  const [visible, setVisible] = useState(false);\n\n  useEffect(() => {\n    setVisible(currentStatus === forStatus);\n  }, [currentStatus, forStatus]);\n\n  return <>{visible && children}</>;\n};\n\nexport default EnumState;\n","import React, { useState } from \"react\";\n\nimport FormControl from \"@material-ui/core/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport PlaylistAdd from \"@material-ui/icons/PlaylistAdd\";\n\nimport { addSet } from \"../../Firebase\";\nimport { InputAdornment } from \"@material-ui/core\";\n\nconst AddSetForm = ({ user, onPreAdd = (f) => f, onPostAdd = (f) => f }) => {\n  const [value, setValue] = useState(\"\");\n\n  const handleChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (user) {\n      const title = value;\n      const userId = user.uid;\n\n      onPreAdd();\n      handleAddSet(userId, { title: title });\n    }\n  };\n\n  const handleAddSet = (userId, data) => {\n    addSet(userId, data)\n      .then((res) => {\n        onPostAdd(res); //res is true/false if transaction completed\n      })\n      .catch((e) => {\n        console.error(\"AddSet.js: Error adding new set: \", e.message);\n      });\n\n    setValue(\"\");\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <FormControl error>\n          <TextField\n            label=\"Add Set\"\n            value={value}\n            onChange={handleChange}\n            size=\"small\"\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton type=\"submit\">\n                    {value.length > 0 && <PlaylistAdd />}\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n          />\n        </FormControl>\n      </form>\n    </>\n  );\n};\n\nexport default AddSetForm;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { getDocFromUserSets, removeSet } from \"../../Firebase\";\nimport Loading from \"../../Loading\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\nimport { ListItemSecondaryAction, IconButton } from \"@material-ui/core\";\n\nimport { SET_PAGE } from \"../../../constants/routes\";\nimport { useUserClient, ACTION_TYPE } from \"../../../hooks/useUserClient\";\n\nimport AddSetForm from \"../AddSet\";\n\nconst useStyles = makeStyles({\n  setViewRoot: {\n    flexGrow: \"1\",\n    minWidth: \"350px\",\n    maxWidth: \"800px\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  addSetFormDiv: {\n    alignSelf: \"flex-end\",\n    width: \"325px\",\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n  },\n  noSetsDiv: {\n    alignSelf: \"center\",\n    padding: \"30px 0\",\n  },\n  setsListRoot: {},\n  setsListItem: {\n    borderLeft: \"3px solid transparent\",\n    \"&:hover\": {\n      borderLeft: \"3px solid rgb(43, 140, 236)\",\n    },\n  },\n});\n\nconst SetsView = ({ user }) => {\n  const classes = useStyles();\n  const userSetsDoc = useRef(null);\n  const [sets, setSets] = useState(null);\n  const [refresh, setRefresh] = useState(false); // used to trigger re-render for SetsView\n  const [isLoading, setIsLoading] = useState(sets ? false : true);\n  const [userClient, userClientDispatch] = useUserClient();\n\n  /* Update userSet state if the user prop changes */\n  useEffect(() => {\n    if (user != null) {\n      // Grab new group of sets from db collection (user-sets)\n      setIsLoading(true);\n      getDocFromUserSets(user.uid)\n        .then((snapshot) => {\n          if (!snapshot.exists) {\n            console.debug(\n              \"SetsView.js: getDocFromUserSets() did not return a document (i.e. this user has no sets, or this is an error!)\"\n            );\n            setIsLoading(false);\n            return;\n          }\n\n          userSetsDoc.current = snapshot.data();\n          console.debug(\n            \"SetsView.js: getDocFromUserSets (database), snapshot.data() = \",\n            snapshot.data()\n          );\n\n          const res = setsArrayFromObject(snapshot.data().sets);\n\n          console.debug(\"SetsView.js: res = \", res);\n\n          if (shouldUpdate(userSetsDoc.current)) {\n            setSets(res);\n            setIsLoading(false);\n          }\n        })\n        .catch((e) => {\n          console.error(\n            \"SetsView.js: Couldn't get doc from user-sets: \",\n            e.message\n          );\n        });\n    }\n  }, [user, refresh]);\n\n  /* Helper function that takes the 'sets' field from the database document\n   * which is an Object with a bunch of key-value entries for each set and\n   * turns it into an array of each set object that is easier to iterate\n   */\n  const setsArrayFromObject = (setsObject) => {\n    // get key-value pairs\n    const entries = Object.entries(setsObject);\n    // result array\n    let res = [];\n\n    for (const [key, value] of entries) {\n      res.push({ setId: key, data: value });\n    }\n\n    return res;\n  };\n\n  const shouldUpdate = (userSetsDoc) => {\n    // Could check here to see if the new group of sets is different than the old group of sets\n    return true;\n  };\n\n  const triggerIsLoading = () => {\n    setIsLoading(true);\n  };\n\n  const onNewSetAdded = (updatedUserSetsDoc) => {\n    if (updatedUserSetsDoc) {\n      setRefresh(!refresh);\n    }\n  };\n\n  // REMOVE SET\n  const onRemoveSet = (event, setId) => {\n    event.preventDefault();\n\n    if (setId != null) {\n      setIsLoading(true);\n      removeSet(user.uid, setId)\n        .then(() => {\n          // send refresh signal to re-render\n          setRefresh(!refresh);\n          // now we need to change the active set if this set we deleted was active\n          if (userClient.activeSet.setId === setId) {\n            userClientDispatch({\n              type: ACTION_TYPE.CLEAR_ACTIVE_SET,\n            });\n          }\n        })\n        .catch((error) => {\n          console.error(\"SetsView.js: Couldn't remove set: \", error.message);\n        });\n    }\n  };\n\n  /* --- RETURN () --- --- --- --- --- --- --- */\n  if (!isLoading) {\n    return (\n      <div className={classes.setViewRoot}>\n        <div className={classes.addSetFormDiv}>\n          <AddSetForm\n            user={user}\n            onPreAdd={triggerIsLoading}\n            onPostAdd={onNewSetAdded}\n          />\n        </div>\n\n        {sets != null && sets.length > 0 ? (\n          <SetsList sets={sets} onRemoveSet={onRemoveSet} />\n        ) : (\n          <div className={classes.noSetsDiv}>\n            You have no sets. Add your first set!\n          </div>\n        )}\n      </div>\n    );\n  } else {\n    return (\n      <div className={classes.setViewRoot}>\n        <Loading type=\"smallGrey\" />\n        {/*sets != null && sets.length > 1 ? <SetsList sets={sets} /> : null*/}\n      </div>\n    );\n  }\n};\n\nconst getDateStringFromTimestamp = (timestamp) => {\n  const date = new Date(timestamp.seconds * 1000);\n  return date.toLocaleDateString();\n};\n\nconst SetsList = ({ sets, onRemoveSet = (e, f) => f }) => {\n  const classes = useStyles();\n  return (\n    <List className={classes.setsListRoot}>\n      {sets.map((setItem) => (\n        <ListItem\n          key={setItem.setId}\n          divider={true}\n          component={Link}\n          to={`${SET_PAGE}/${setItem.setId}`}\n          classes={{\n            container: classes.setsListItem,\n          }}\n        >\n          <ListItemText\n            primary={setItem.data.title}\n            secondary={getDateStringFromTimestamp(setItem.data.created_on)}\n          ></ListItemText>\n          <ListItemSecondaryAction>\n            <IconButton onClick={(e) => onRemoveSet(e, setItem.setId)}>\n              <DeleteForeverIcon />\n            </IconButton>\n          </ListItemSecondaryAction>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n\nSetsList.propTypes = {\n  sets: PropTypes.array,\n  onRemoveSet: PropTypes.func,\n  onToggleActiveSet: PropTypes.func,\n};\n\nexport default SetsView;\n","import React from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport LockIcon from \"@material-ui/icons/Lock\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles({\n  needToLoginRoot: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"space-evenly\",\n    alignItems: \"center\",\n    width: \"400px\",\n    height: \"400px\",\n  },\n  needToLoginLinks: {\n    display: \"flex\",\n    justifyContent: \"space-evenly\",\n    width: \"100%\",\n  },\n});\n\nconst NeedToLogin = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.needToLoginRoot}>\n      <div>\n        <Typography variant=\"h4\">\n          <LockIcon fontSize=\"large\" />\n          Sorry\n        </Typography>\n      </div>\n      <div>\n        <Typography variant=\"body1\">\n          You will need to login to view this content.\n        </Typography>\n      </div>\n      <div className={classes.needToLoginLinks}>\n        <Link>Login</Link>\n        <Link>Sign Up</Link>\n      </div>\n    </div>\n  );\n};\n\nexport default NeedToLogin;\n","import React, { useState, useEffect, useRef } from \"react\";\n\nimport Loading from \"../Loading\";\nimport {\n  useUserDb,\n  useUserSessionStatus,\n  USER_SESSION_STATUS,\n} from \"../../hooks/useSession\";\n\nimport EnumState from \"../EnumState\";\n\nimport SetsView from \"./SetsView\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport NeedToLogin from \"../NeedToLogin\";\n\nconst useStyles = makeStyles({\n  setsPageRoot: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    paddingTop: \"30px\",\n  },\n});\n\nconst SetsPage = () => {\n  const classes = useStyles();\n  const { userDb: user } = useUserDb(); // get our user info\n  const userSessionStatus = useUserSessionStatus();\n\n  // TODO: need UI feedback when completed\n  const onNewSetAdded = (res) => {\n    // Do something when user adds a new set\n  };\n\n  const userReadyRender = () => {\n    return (\n      <>\n        <SetsView user={user} />\n      </>\n    );\n  };\n\n  return (\n    <div className={classes.setsPageRoot}>\n      <EnumState\n        currentStatus={userSessionStatus}\n        forStatus={USER_SESSION_STATUS.ANON}\n      >\n        <NeedToLogin />\n      </EnumState>\n      <EnumState\n        currentStatus={userSessionStatus}\n        forStatus={USER_SESSION_STATUS.USER_LOADING}\n      >\n        {/* <Loading type=\"smallGrey\" /> */}\n      </EnumState>\n      <EnumState\n        currentStatus={userSessionStatus}\n        forStatus={USER_SESSION_STATUS.USER_READY}\n      >\n        {userReadyRender()}\n      </EnumState>\n    </div>\n  );\n};\n\nexport default SetsPage;\n","import React, { useState } from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport { InputAdornment } from \"@material-ui/core\";\n\nimport { addNote } from \"../../Firebase\";\n\nconst useStyles = makeStyles({\n  textfieldRoot: {},\n  checkIconButton: {\n    padding: \"3px\",\n  },\n  checkIcon: {\n    color: \"green\",\n  },\n});\n\nconst AddNoteForm = ({ user, setId, onNewNoteAdded = (f) => f }) => {\n  const classes = useStyles();\n  const [value, setValue] = useState(\"\");\n\n  const handleChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (user && setId) {\n      const title = value;\n      const userId = user.uid;\n\n      // TODO: NEED TO ENSURE FORM VALIDATION\n      // i.e. IS TITLE NOT EMPTY, NO SPECIAL SYMBOLS, ETC...\n\n      // only then...\n      handleAddNote(userId, setId, { title: title });\n    }\n  };\n\n  const handleAddNote = (userId, setId, data) => {\n    addNote(userId, setId, data)\n      .then((res) => {\n        onNewNoteAdded(res); //res is true/false if transaction completed\n      })\n      .catch((error) => {\n        console.error(\"AddNote.js: Error adding new note: \", error.message);\n      });\n\n    setValue(\"\");\n  };\n\n  return (\n    <>\n      <FormControl error>\n        <TextField\n          variant=\"outlined\"\n          value={value}\n          placeholder=\"Title\"\n          onChange={handleChange}\n          size=\"small\"\n          className={classes.textfieldRoot}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  onClick={handleSubmit}\n                  className={classes.checkIconButton}\n                >\n                  {value.length > 0 && (\n                    <CheckIcon className={classes.checkIcon} />\n                  )}\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n        />\n      </FormControl>\n    </>\n  );\n};\n\nexport default AddNoteForm;\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\nimport { ListItemSecondaryAction, IconButton } from \"@material-ui/core\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Popover from \"@material-ui/core/Popover\";\nimport Button from \"@material-ui/core/Button\";\nimport NoteAddOutlinedIcon from \"@material-ui/icons/NoteAddOutlined\";\n\nimport { NOTE_PAGE } from \"../../../constants/routes\";\nimport { getDocFromSetNotes, removeNote } from \"../../Firebase\";\nimport { useUserClient, ACTION_TYPE } from \"../../../hooks/useUserClient\";\nimport AddNoteForm from \"../AddNote\";\nimport Loading from \"../../Loading\";\n\nconst useStyles = makeStyles({\n  notesListRoot: {\n    width: \"400px\",\n  },\n  notesViewToolbar: {\n    justifyContent: \"space-between\",\n    minHeight: \"36px\",\n    marginBottom: \"36px\",\n  },\n  notesListItemNote: {\n    border: \"1px solid #e8dbdb\",\n    borderLeft: \"5px solid #03a9f4\",\n    borderTopLeftRadius: \"3px\",\n    borderBottomLeftRadius: \"3px\",\n    marginBottom: \"0.5em\",\n    \"&:hover\": {\n      borderLeft: \"6px solid #0288d1\",\n    },\n  },\n  notesListLink: {\n    textDecoration: \"none\",\n    color: \"#1a3743\",\n  },\n  notesListItemPrimaryText: {\n    lineHeight: \"1.2em\",\n  },\n  notesListItemAddNote: {\n    marginBottom: \"1em\",\n    paddingRight: \"0\",\n    justifyContent: \"flex-end\",\n  },\n  notesListItemSecondaryActionRemoveNote: {\n    right: \"0px\",\n  },\n});\n\nconst NotesView = ({ setId, user }) => {\n  const classes = useStyles();\n  const [setInfo, setSetInfo] = useState(null);\n  const [notes, setNotes] = useState(null);\n  const [isLoading, setIsLoading] = useState(notes ? false : true);\n  const [refresh, setRefresh] = useState(false); // to trigger re-render for NotesView\n  const [userClient, userClientDispatch] = useUserClient(); // use context here to track which set is \"active\"\n  const [addNotePopoverAnchor, setAddNotePopoverAnchor] = useState(null);\n\n  useEffect(() => {\n    if (setId == null || setId.trim() === \"\") {\n      return;\n    }\n\n    // Get doc from 'set-notes' collection that contains some notes' info\n    setIsLoading(true);\n\n    getDocFromSetNotes(setId)\n      .then((snapshot) => {\n        if (!snapshot.exists) {\n          throw new Error(\n            `No document found in 'set-notes' for setId ${setId}`\n          );\n        }\n\n        setSetInfo({\n          title: snapshot.data().setTitle,\n          notes_count: snapshot.data().notes_count,\n          max_notes: snapshot.data().max_notes || 5, // default to max of 5 notes\n        });\n\n        if (!(\"notes\" in snapshot.data())) {\n          throw new Error(\n            \"Data model error, there is no 'notes' object in this document!\"\n          );\n        }\n\n        // Try to extract the notes object from the document\n        // see if notes object contains any noteId's\n        let res = [];\n        if (Object.keys(snapshot.data().notes).length > 0) {\n          res = notesArrayFromObject(snapshot.data().notes);\n\n          if (res && res.length > 0) {\n            setNotes(res);\n          }\n        } else {\n          setNotes(null);\n        }\n\n        /* let the rest of the app know that the set that this note\n        belongs to should be \"active\", e.g. to show in Navigation bar or other places*/\n        userClientDispatch({\n          type: ACTION_TYPE.UPDATE_ACTIVE_SET,\n          payload: {\n            setId: snapshot.id,\n            title: snapshot.data().setTitle,\n          },\n        });\n        setIsLoading(false);\n      })\n      .catch((e) => {\n        console.error(\n          \"NotesList.js: Failed to retrieve doc from 'set-notes': \",\n          e.message\n        );\n        setIsLoading(false);\n      });\n  }, [setId, refresh]);\n\n  const notesArrayFromObject = (notesObject) => {\n    const entries = Object.entries(notesObject);\n    let res = [];\n    for (const [key, value] of entries) {\n      res.push({ noteId: key, data: value });\n    }\n    return res;\n  };\n\n  const onNewNoteAdded = (updatedNotesView) => {\n    if (updatedNotesView) {\n      setRefresh(!refresh);\n      onCloseAddNotePopover();\n    }\n  };\n\n  const onRemoveNote = (e, noteId) => {\n    if (noteId == null || setId == null) {\n      console.error(\n        \"NotesView.js: Cannot remove note, either invalid noteId or setId\"\n      );\n    }\n\n    try {\n      removeNote(noteId, setId).then((res) => {\n        res && setRefresh(!refresh);\n      });\n    } catch (error) {\n      console.error(\"NotesView.js Cannot remove note: \", error.message);\n    }\n  };\n\n  const onClickAddNotePopover = (e) => {\n    setAddNotePopoverAnchor(e.currentTarget);\n  };\n\n  const onCloseAddNotePopover = () => {\n    setAddNotePopoverAnchor(null);\n  };\n\n  const addNotePopoverOpen = Boolean(addNotePopoverAnchor);\n\n  const toolbar = () => {\n    return (\n      <Toolbar className={classes.notesViewToolbar}>\n        <div>\n          <Typography variant=\"subtitle2\">\n            {setInfo.notes_count} {`note${setInfo.notes_count > 1 ? \"s\" : \"\"}`}\n          </Typography>\n        </div>\n        <div>\n          <Tooltip title=\"Add Note\">\n            <Button onClick={onClickAddNotePopover}>\n              <NoteAddOutlinedIcon />\n            </Button>\n          </Tooltip>\n\n          <Popover\n            open={addNotePopoverOpen}\n            onClose={onCloseAddNotePopover}\n            anchorEl={addNotePopoverAnchor}\n            anchorOrigin={{\n              vertical: \"bottom\",\n              horizontal: \"center\",\n            }}\n            transformOrigin={{\n              vertical: \"top\",\n              horizontal: \"right\",\n            }}\n          >\n            <AddNoteForm\n              user={user}\n              setId={setId}\n              onNewNoteAdded={onNewNoteAdded}\n            />\n          </Popover>\n        </div>\n      </Toolbar>\n    );\n  };\n\n  if (!isLoading) {\n    return (\n      <>\n        {toolbar()}\n        <List className={classes.notesListRoot}>\n          {notes !== null && (\n            <>\n              {notes.map((note) => (\n                <ListItem\n                  key={note.noteId}\n                  classes={{\n                    container: classes.notesListItemNote,\n                  }}\n                >\n                  <Link\n                    to={`${NOTE_PAGE}/${note.noteId}`}\n                    className={classes.notesListLink}\n                  >\n                    <ListItemText\n                      primary={note.data.title}\n                      primaryTypographyProps={{\n                        className: classes.notesListItemPrimaryText,\n                      }}\n                    />\n                  </Link>\n                  <ListItemSecondaryAction\n                    className={classes.notesListItemSecondaryActionRemoveNote}\n                  >\n                    <Tooltip title=\"Delete\">\n                      <IconButton onClick={(e) => onRemoveNote(e, note.noteId)}>\n                        <DeleteForeverIcon />\n                      </IconButton>\n                    </Tooltip>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              ))}\n            </>\n          )}\n        </List>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <Loading type=\"smallGrey\" relative={true} />\n      </>\n    );\n  }\n};\n\nexport default NotesView;\n","import React from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nconst useStyles = makeStyles({\n  gridContainerRoot: {},\n  gridItemSide: {},\n  paperSide: {\n    padding: \"6px 8px\",\n    minHeight: \"100px\",\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    textAlign: \"center\",\n  },\n  gridItemActions: {\n    //background: \"yellow\",\n    justifyContent: \"center\",\n  },\n});\n\nconst CardView = ({ card, onDeleteCard = (f) => f }) => {\n  const classes = useStyles();\n\n  const handleDelete = () => {\n    onDeleteCard(card.cardId);\n  };\n\n  return (\n    <Grid container className={classes.gridContainerRoot} spacing={1}>\n      <Grid item className={classes.gridItemSide} sm={5} xs={12}>\n        <Paper className={classes.paperSide} elevation={2}>\n          <Typography variant=\"h6\">{card.side_one}</Typography>\n        </Paper>\n      </Grid>\n      <Grid item className={classes.gridItemSide} sm xs>\n        <Paper className={classes.paperSide} elevation={2}>\n          <Typography variant=\"body1\">{card.side_two}</Typography>\n        </Paper>\n      </Grid>\n      <Grid item className={classes.gridItemActions} sm={1} xs={12}>\n        <IconButton>\n          <EditIcon />\n        </IconButton>\n        <IconButton onClick={handleDelete}>\n          <DeleteIcon />\n        </IconButton>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default CardView;\n","import React, { useState, useEffect } from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport ViewHeadlineIcon from \"@material-ui/icons/ViewHeadline\";\nimport ViewStreamIcon from \"@material-ui/icons/ViewStream\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport CardView from \"./CardView\";\nimport Loading from \"../Loading\";\n\nimport { getDocFromSetCards, removeCard } from \"../Firebase\";\n\nconst useStyles = makeStyles({\n  deckViewToolbar: {\n    justifyContent: \"space-between\",\n    minHeight: \"36px\",\n    marginBottom: \"36px\",\n  },\n  listItemCardView: {\n    padding: \"0px 2px\",\n    marginBottom: \"20px\",\n    whiteSpace: \"pre-wrap\",\n  },\n  listItemCompactView: {\n    whiteSpace: \"pre-wrap\",\n  },\n});\n\nconst DeckView = ({ setId }) => {\n  const classes = useStyles();\n  const [deckInfo, setDeckInfo] = useState(null);\n  const [cards, setCards] = useState(null);\n  const [isLoading, setIsLoading] = useState(cards ? false : true);\n  const [refresh, setRefresh] = useState(false); // to trigger re-render\n  const [compactView, setCompactView] = useState(true);\n\n  useEffect(() => {\n    if (setId == null || setId.trim() === \"\") {\n      return;\n    }\n\n    // Get doc from 'set-cards' collection that contains the cards for this set\n    setIsLoading(true);\n    getDocFromSetCards(setId)\n      .then((snapshot) => {\n        if (!snapshot.exists) {\n          throw new Error(\n            `No document found in 'set-cards' for setId ${setId}`\n          );\n        }\n\n        setDeckInfo({\n          setTitle: snapshot.data().setTitle,\n          cards_count: snapshot.data().cards_count,\n          last_modified: snapshot.data().last_modified,\n        });\n\n        if (!(\"cards\" in snapshot.data())) {\n          throw new Error(\n            \"Data model error, there is no 'cards' object in this document!\"\n          );\n        }\n\n        // Try to extract the cards object from the document\n        // see if cards object contains any cardId's\n        let res = [];\n        if (Object.keys(snapshot.data().cards).length > 0) {\n          res = cardsArrayFromObject(snapshot.data().cards);\n\n          if (res && res.length > 0) {\n            setCards(res);\n          }\n        } else {\n          setCards(null);\n        }\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.error(\n          \"DeckView.js: Failed to retrive doc from 'set-cards': \",\n          error.message\n        );\n        setIsLoading(false);\n      });\n  }, [setId, refresh]);\n\n  const cardsArrayFromObject = (cardsObject) => {\n    const entries = Object.entries(cardsObject);\n    let res = [];\n    for (const [key, value] of entries) {\n      res.push({ cardId: key, data: value });\n    }\n    return res;\n  };\n\n  const onDeleteCard = (cardId) => {\n    try {\n      if (cardId == null || cardId.trim() === \"\") {\n        console.error(\n          \"DeckView.js: Cannot perform onDeleteCard because cardId is null/empty\"\n        );\n        return;\n      }\n      removeCard(cardId, setId).then((res) => {\n        setRefresh(!refresh);\n      });\n    } catch (error) {\n      console.error(`DeckView.js: Could not remove card: ${error.message}`);\n    }\n  };\n\n  const toolbar = () => {\n    return (\n      <Toolbar className={classes.deckViewToolbar}>\n        <div>\n          <Typography variant=\"subtitle2\">\n            {deckInfo.cards_count}{\" \"}\n            {`card${deckInfo.cards_count > 1 ? \"s\" : \"\"}`}\n          </Typography>\n        </div>\n        <div>\n          <Tooltip\n            title={\n              compactView ? \"Switch to Card View\" : \"Switch to Compact View\"\n            }\n          >\n            <Button\n              onClick={() => {\n                setCompactView(!compactView);\n              }}\n            >\n              {compactView ? (\n                <ViewStreamIcon alt=\"test\" />\n              ) : (\n                <ViewHeadlineIcon />\n              )}\n            </Button>\n          </Tooltip>\n        </div>\n      </Toolbar>\n    );\n  };\n\n  if (!isLoading) {\n    if (cards == null) {\n      return <></>;\n    }\n\n    if (compactView) {\n      return (\n        <>\n          {toolbar()}\n          <List>\n            {cards.map((card) => (\n              <ListItem\n                key={card.cardId}\n                className={classes.listItemCompactView}\n              >\n                <Grid container>\n                  <Grid item xs={6}>\n                    {card.data.side_one}\n                  </Grid>\n                  <Grid item xs>\n                    {card.data.side_two}\n                  </Grid>\n                </Grid>\n              </ListItem>\n            ))}\n          </List>\n        </>\n      );\n    } else {\n      return (\n        <>\n          {toolbar()}\n          <List>\n            {cards.map((card) => (\n              <ListItem key={card.cardId} className={classes.listItemCardView}>\n                <CardView\n                  card={{ cardId: card.cardId, ...card.data }}\n                  onDeleteCard={onDeleteCard}\n                />\n              </ListItem>\n            ))}\n          </List>\n        </>\n      );\n    }\n  } else {\n    return (\n      <>\n        <Loading type=\"smallGrey\" relative={true} />\n      </>\n    );\n  }\n};\n\nexport default DeckView;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport Loading from \"../Loading\";\nimport {\n  useUserDb,\n  useUserSessionStatus,\n  USER_SESSION_STATUS,\n} from \"../../hooks/useSession\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { useUserClient } from \"../../hooks/useUserClient\";\n\nimport NotesView from \"./NotesView\";\nimport DeckView from \"../DeckView\";\nimport EnumState from \"../EnumState\";\n\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles({\n  root: {\n    paddingTop: \"30px\",\n  },\n  gridContainerRoot: {\n    //border: \"1px solid grey\",\n    justifyContent: \"center\",\n  },\n  gridItemNotesView: {\n    //background: \"rgba(157, 235, 218, 0.3)\",\n  },\n  gridItemDeckView: {\n    //background: \"rgba(235, 218, 157, 0.1)\",\n  },\n  sectionHeading: {\n    fontVariantCaps: \"all-small-caps\",\n    borderBottom: \"3px solid black\",\n  },\n});\n\nconst SetPage = () => {\n  const classes = useStyles();\n  const { userDb: user } = useUserDb(); // get our user info\n  const userSessionStatus = useUserSessionStatus();\n  const { id: setId } = useParams(); // get the setId from the last part of the URL\n\n  const [userClient, userClientDispatch] = useUserClient(); // tracks which set is \"active\"\n\n  const userReadyRender = () => {\n    /* NotesView and DeckView should each handle displaying their own Loading component*/\n\n    return (\n      <div className={classes.root}>\n        <Typography variant=\"h4\">\n          {userClient.activeSet && userClient.activeSet.title}\n        </Typography>\n        <br />\n        <Grid container className={classes.gridContainerRoot} spacing={2}>\n          <Grid item className={classes.gridItemNotesView} lg={4} xs={12}>\n            <Typography variant=\"h5\" className={classes.sectionHeading}>\n              Notes\n            </Typography>\n            <NotesView setId={setId} user={user} />\n          </Grid>\n          <Grid item className={classes.gridItemDeckView} lg xs>\n            <Typography variant=\"h5\" className={classes.sectionHeading}>\n              Deck\n            </Typography>\n            <DeckView setId={setId} />\n          </Grid>\n        </Grid>\n      </div>\n    );\n  };\n\n  return (\n    <Container>\n      <EnumState\n        currentStatus={userSessionStatus}\n        forStatus={USER_SESSION_STATUS.ANON}\n      >\n        Need to log in\n      </EnumState>\n      <EnumState\n        currentStatus={userSessionStatus}\n        forStatus={USER_SESSION_STATUS.USER_LOADING}\n      ></EnumState>\n      <EnumState\n        currentStatus={userSessionStatus}\n        forStatus={USER_SESSION_STATUS.USER_READY}\n      >\n        {userReadyRender()}\n      </EnumState>\n    </Container>\n  );\n};\n\nexport default SetPage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Navigation from \"../Navigation\";\nimport * as ROUTES from \"../../constants/routes\";\n\nimport Container from \"@material-ui/core/Container\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport Loading from \"../Loading\";\n\nimport HomePage from \"../HomePage\";\nimport ViewNotePage from \"../ViewNote\";\nimport SignInPage from \"../SignInPage\";\nimport SignOutPage from \"../SignOutPage\";\nimport SetsPage from \"../SetsPage\";\nimport SetPage from \"../SetPage\";\n\nimport {\n  UserSessionContext,\n  useOnAuthStateChanged,\n} from \"../../hooks/useSession\";\n\nimport UserClientContext from \"../../hooks/useUserClient\";\n\nconst useStyles = makeStyles({\n  root: {\n    paddingTop: \"30px\",\n    paddingBottom: \"200px\",\n  },\n  backdrop: {\n    backgroundColor: \"rgba(232, 232, 232, 0.2)\",\n  },\n});\n\nconst App = () => {\n  const classes = useStyles();\n\n  /* We want to match to the note/id \n  See https://reactrouter.com/web/example/url-params */\n  const notePath = `${ROUTES.NOTE_PAGE}/:id`;\n\n  const setPath = `${ROUTES.SET_PAGE}/:id`;\n\n  const {\n    initializing,\n    userSession,\n    loadingUser,\n    userDb,\n    userSessionStatus,\n  } = useOnAuthStateChanged();\n\n  const userSessionValue = {\n    initializing: initializing,\n    userSession: userSession,\n  };\n  const userDbValue = {\n    loadingUser: loadingUser,\n    userDb: userDb,\n  };\n\n  if (initializing) {\n    return (\n      <Backdrop open={initializing} className={classes.backdrop}>\n        <Loading />\n      </Backdrop>\n    );\n  } else {\n    return (\n      <Router>\n        <UserSessionContext\n          userSessionValue={userSessionValue}\n          userDbValue={userDbValue}\n          userSessionStatusValue={userSessionStatus}\n        >\n          <UserClientContext>\n            <Navigation />\n            <div className={classes.root}>\n              <Switch>\n                <Route exact path={ROUTES.HOME} component={HomePage} />\n                <Route path={ROUTES.SETS_PAGE} component={SetsPage} />\n                <Route path={setPath} component={SetPage} />\n                <Route path={notePath} component={ViewNotePage} />\n                <Route path={ROUTES.NOTE_PAGE} component={ViewNotePage} />\n                <Route path={ROUTES.SIGNIN_PAGE} component={SignInPage} />\n                <Route path={ROUTES.SIGNOUT_PAGE} component={SignOutPage} />\n              </Switch>\n            </div>\n          </UserClientContext>\n        </UserSessionContext>\n      </Router>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"fontsource-roboto\";\n\nimport { db, FirebaseContext } from \"./components/Firebase\";\n\nReactDOM.render(\n  <FirebaseContext.Provider value={db}>\n    <App />\n  </FirebaseContext.Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}